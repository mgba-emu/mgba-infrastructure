# -*- python -*-
# ex: set syntax=python: ts=4 et

from tokens import *
from buildbot.plugins import *
from buildbot.process.results import SKIPPED

repo = 'https://github.com/mgba-emu/mgba.git'

c = BuildmasterConfig = {}

####### BUILDSLAVES

package = {
    '7z': ["7za", "a", "-t7z", "-m0=lzma", "-mx=9", "-mfb=64", "-md=32m", "-ms=on"],
    'tar.xz': ["gtar", "cJf"]
}

default_workers = ['vulpes-{}'.format(idx) for idx in range(2)]
c['workers'] = [worker.LocalWorker(name, max_builds=2) for name in default_workers]
c['workers'].append(worker.LocalWorker('vulpes-upload', max_builds=8))
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = [
    changes.GitPoller(repo, workdir='gitpoller-workdir', branches=True, pollinterval=60),
]

####### SCHEDULERS

import datetime

c['schedulers'] = []
c['collapseRequests'] = False

builders = ['analyze-freebsd']
force_builders = ['analyze-freebsd']
upload_builders = []
medusa_builders = []

####### BUILDERS

import os

path = os.environ['HOME'] + '/bin:' + os.environ['PATH']
env = {
    'DEVKITPRO': '/opt/devkitPro',
    'VITASDK': '/opt/vitasdk'
}

c['builders'] = []

def isMaster(step):
    return step.build.getProperty('branch', 'not-master') == 'master'

def isMedusa(step):
    return step.build.getProperty('branch', 'not-medusa') == 'medusa' \
        and step.build.getProperty('medusa', False)

def hasPlatform(step):
    return step.build.hasProperty('platform')

def hasDeps(step):
    return step.build.hasProperty('deps')

@util.renderer
def date(props):
    d = datetime.datetime.utcnow()
    return d.strftime("%Y-%m-%d")

@util.renderer
def isPerf(step):
    if not step.build.hasProperty('perf'):
        return '-DBUILD_PERF=OFF'
    branch = step.build.getProperty('branch', 'not-master')
    if branch == 'master' or branch.startswith('optimization/'):
        return '-DBUILD_PERF=ON'
    return '-DBUILD_PERF=OFF'


class Builder:
    def __init__(self, name):
        self.name = name
        self.build_workers = default_workers
        self.base_config = {}
        self.configs = []

    def setBaseConfig(self, base_config):
        self.base_config = base_config

    def setBuilders(self, builders):
        self.build_workers = builders

    def setConfigs(self, configs):
        self.configs = configs

    def collect(self):
        build_factory = util.BuildFactory()
        build_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental'))
        build_factory.addStep(steps.MakeDirectory(dir="build/build"))
        build_factory.addStep(steps.SetPropertyFromCommand(property="revnumber", command="git rev-list --count HEAD"))
        build_factory.addStep(steps.ShellCommand(name="Configure",
            command=["cmake", "..",
                isPerf,
                "-DCMAKE_BUILD_TYPE=Release",
                "-DCPACK_PACKAGE_FILE_NAME=build",
                util.Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
                util.Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
                util.Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_LTO=%(prop:no-lto:?|OFF|ON)s"),
                util.Interpolate("-DBUILD_STATIC=%(prop:static:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_SHARED=%(prop:static:?|OFF|ON)s"),
                util.Interpolate("-DM_CORE_DS=%(prop:medusa:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_PYTHON=%(prop:python:?|ON|OFF)s"),
                util.Interpolate("-DBUILD_SUITE=%(prop:tests:?|ON|OFF)s"),
                util.Property("cmakeFlags", default=[]),
            ],
            workdir="build/build", haltOnFailure=True))

        def build(build_factory):
            build_factory.addStep(steps.SetProperty(property="project-name", value="medusa-emu", doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s)))
            build_factory.addStep(steps.Compile(command=["make", "-j4"], workdir="build/build", haltOnFailure=True))
            build_factory.addStep(steps.ShellCommand(name="Archive", command=["cpack", "-V", "-G", "TGZ" if 'deb' not in self.base_config else "DEB"], workdir="build/build", haltOnFailure=True))
            if 'deb' in self.base_config:
                build_factory.addStep(steps.ShellCommand(name="Sanitize", command=["fakeroot", "../tools/sanitize-deb.sh", util.Interpolate("build-lib%(prop:project-name:-mgba)s.deb"), util.Interpolate("build-%(prop:project-name:-mgba)s-sdl.deb"), util.Interpolate("build-%(prop:project-name:-mgba)s-qt.deb")], workdir="build/build", env={'PATH': path}))
                build_factory.addStep(steps.MakeDirectory(dir="build/build/build"))
                build_factory.addStep(steps.ShellCommand(name="Move", command=["mv", util.Interpolate("build-lib%(prop:project-name:-mgba)s.deb"), util.Interpolate("build/lib%(prop:project-name:-mgba)s.deb")], workdir="build/build"))
                build_factory.addStep(steps.ShellCommand(name="Move", command=["mv", util.Interpolate("build-%(prop:project-name:-mgba)s-sdl.deb"), util.Interpolate("build/%(prop:project-name:-mgba)s-sdl.deb")], workdir="build/build"))
                build_factory.addStep(steps.ShellCommand(name="Move", command=["mv", util.Interpolate("build-%(prop:project-name:-mgba)s-qt.deb"), util.Interpolate("build/%(prop:project-name:-mgba)s-qt.deb")], workdir="build/build"))
                build_factory.addStep(steps.ShellCommand(name="Bundle", command=["tar", "cvzf", "build.tar.gz", "build"], workdir="build/build"))

        build(build_factory)
        if 'tests' in self.base_config:
            build_factory.addStep(steps.ShellCommand(name="Test", command=["ctest", "-V"], workdir="build/build", haltOnFailure=False))
        build_factory.addStep(steps.FileUpload(workdir="build/build", blocksize=1024 * 256, workersrc="build.tar.gz", masterdest=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))
        build_factory.addStep(steps.MasterShellCommand(name="Fix permissions", command=["chmod", "644", util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")], haltOnFailure=True))

        if 'frontends' in self.base_config:
            build_factory.addStep(steps.ShellCommand(name="Copy Gold", command=["cp", "-r", "../../../../res/gold/", "res/"], workdir="build"))
            build(build_factory)
            build_factory.addStep(steps.FileUpload(workdir="build/build", blocksize=1024 * 256, workersrc=util.Interpolate("build.tar.gz"), masterdest=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s-gold.tar.gz")))
            build_factory.addStep(steps.MasterShellCommand(name="Fix Gold permissions", command=["chmod", "644", util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s-gold.tar.gz")], haltOnFailure=True))
            build_factory.addStep(steps.ShellCommand(name="Deconfigure Gold", command=["git", "reset", "--hard"], workdir="build", haltOnFailure=True))

        build_factory.addStep(steps.RemoveDirectory(dir="build/build"))
        build_factory.addStep(steps.Trigger(schedulerNames=["perf-{}".format(self.name)], doStepIf=lambda s: isPerf.getRenderingFor(s) == '-DBUILD_PERF=ON', hideStepIf=lambda results, s: not s.build.hasProperty('perf')))
        build_factory.addStep(steps.Trigger(schedulerNames=[util.Interpolate("upload-%(prop:name)s")], doStepIf=lambda s: (isMaster(s) or isMedusa(s)) and hasPlatform(s), hideStepIf=lambda results, s: not hasPlatform(s), set_properties={ 'revnumber': util.Property('revnumber') }))

        configs = self.configs or [{'name': self.name}]
        for config in configs:
            cfg = dict(self.base_config)
            cfg.update(config)
            c['builders'].append(util.BuilderConfig(name="build-{}".format(config['name']),
              workernames=self.build_workers,
              env=env,
              properties=cfg,
              factory=build_factory))
            builders.append("build-{}".format(config['name']))
            force_builders.append("build-{}".format(config['name']))
            if 'medusa' in self.base_config:
                medusa_builders.append("build-{}".format(config['name']))

        if 'ext' in self.base_config:
            package_name = "%(prop:project-name:-mGBA)s-%(prop:package-name)s-%(prop:date)s-%(prop:platform)s%(prop:include-hash:+-%(prop:revnumber)s-%(prop:revision)s)s"

            package_factory = util.BuildFactory()
            package_factory.addStep(steps.FileDownload(mastersrc=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), workerdest="archive.tar.gz", haltOnFailure=True, blocksize=1024 * 256))
            package_factory.addStep(steps.FileDownload(mastersrc=util.Property("deps"), workerdest="deps.tar.gz", haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED, blocksize=1024 * 256))
            package_factory.addStep(steps.SetProperty(property="date", value=util.Interpolate("%(kw:date)s", date=date)))
            package_factory.addStep(steps.SetProperty(property="project-name", value="medusa", doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s)))
            package_factory.addStep(steps.MakeDirectory(dir=util.Interpolate("build/" + package_name)))
            package_factory.addStep(steps.ShellCommand(name="Unarchive build", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Unarchive deps", command=["tar", "xvzf", "deps.tar.gz", "-C", util.Interpolate(package_name)], haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
            package_factory.addStep(steps.ShellCommand(name="Generate README", workdir="build/build", command=["bash", "-c", util.Interpolate("echo '<meta charset=\"UTF-8\">' > README.html; markdown share/doc/%(prop:project-name:-mGBA)s/README.md >> README.html")], haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Generate README_DE", workdir="build/build", command=["bash", "-c", util.Interpolate("echo '<meta charset=\"UTF-8\">' > README_DE.html; markdown share/doc/%(prop:project-name:-mGBA)s/README_DE.md >> README_DE.html")], haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Generate CHANGES", workdir="build/build", command=["bash", "-c", util.Interpolate("cat share/doc/%(prop:project-name:-mGBA)s/CHANGES | unix2dos > CHANGES.txt")], haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Move build products", workdir="build/build", command=["mv", util.Property("files"), util.Interpolate("../" + package_name)], doStepIf=lambda s: not isMedusa(s), hideStepIf=lambda results, s: isMedusa(s), haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Move build products", workdir="build/build", command=["mv", util.Property("files-medusa"), util.Interpolate("../" + package_name)], doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s), haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Copy resources", command=["cp", util.Interpolate("../../../../res/%(prop:license:-LICENSE)s"), util.Interpolate(package_name)], haltOnFailure=True))
            package_factory.addStep(steps.ShellCommand(name="Repackage", command=[util.Property("package"), util.Interpolate("package.%(prop:ext)s"), util.Interpolate(package_name)], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
            package_factory.addStep(steps.RemoveDirectory(dir=util.Interpolate("build/" + package_name)))
            package_factory.addStep(steps.FileUpload(name="Upload to archive", blocksize=1024 * 256, workersrc=util.Interpolate("package.%(prop:ext)s"), masterdest=util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s")))
            package_factory.addStep(steps.ShellCommand(name="Clean", command=["rm", "-f", util.Interpolate("package.%(prop:ext)s")]))
            package_factory.addStep(steps.MasterShellCommand(name="Fix permissions", command=["chmod", "644", util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s")], haltOnFailure=True))
            package_factory.addStep(steps.MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", util.Interpolate("%(prop:package-type:-%(prop:package-name)s)s/"), util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s"), util.Interpolate("%(prop:project-name:-mGBA)s-%(prop:package-name)s-latest-%(prop:platform)s.%(prop:ext)s")], haltOnFailure=True))

            package_prop = package[self.base_config['ext']]
            for config in configs:
                cfg = dict(self.base_config)
                cfg.update(config)
                upload_props = {'package-name': 'build', 'include-hash': True, 'package': package_prop}
                upload_props.update(cfg)
                package_props = {'package-name': util.Property('branch'), 'package': package_prop}
                package_props.update(cfg)
                c["builders"].extend([
                    util.BuilderConfig(name="upload-{}".format(config['name']),
                        workernames=['vulpes-upload'],
                        properties=upload_props,
                        factory=package_factory),
                    util.BuilderConfig(name="package-{}".format(config['name']),
                        workernames=['vulpes-upload'],
                        properties=package_props,
                        factory=package_factory),
                ])
                c['schedulers'].append(schedulers.Triggerable(name="upload-{}".format(config['name']), builderNames=["upload-{}".format(config['name'])]))
                upload_builders.append("upload-{}".format(config['name']))
                force_builders.extend(["upload-{}".format(config['name']), "package-{}".format(config['name'])])

        def addPerf():
            perf_factory = util.BuildFactory()
            perf_factory.addStep(steps.SetProperty(property="project-name", value="medusa-emu", doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s)))
            perf_factory.addStep(steps.FileDownload(mastersrc=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), workerdest="archive.tar.gz", haltOnFailure=True, blocksize=1024 * 256))
            perf_factory.addStep(steps.ShellCommand(name="Unarchive", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
            perf_factory.addStep(steps.ShellCommand(name="Profile (software renderer)",
                command=["python", "-u", util.Interpolate("../lib/%(prop:project-name:-mgba)s/perf.py"),
                    "-w", "0",
                    "-g", "4800",
                    util.Property("profileServerCommand", default=[]),
                    util.Property("profileServerAddress", default=[]),
                    "-o",
                    "../../results.csv",
                    "../../roms"],
                env={
                    "LD_LIBRARY_PATH": "../lib"
                }, workdir="build/build/bin", haltOnFailure=True))
            perf_factory.addStep(steps.FileUpload(workersrc="results.csv", masterdest=util.Interpolate("../archive/perf/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-software.csv")))
            perf_factory.addStep(steps.ShellCommand(name="Profile (no renderer)",
                command=["python", "-u", util.Interpolate("../lib/%(prop:project-name:-mgba)s/perf.py"),
                    "-Nw", "0",
                    "-g", "4800",
                    util.Property("profileServerCommand", default=[]),
                    util.Property("profileServerAddress", default=[]),
                    "-o",
                    "../../results.csv",
                    "../../roms"],
                env={
                    "LD_LIBRARY_PATH": "../lib"
                }, workdir="build/build/bin", haltOnFailure=True))
            perf_factory.addStep(steps.FileUpload(workersrc="results.csv", masterdest=util.Interpolate("../archive/perf/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-none.csv"), mode=0o644))
            perf_factory.addStep(steps.RemoveDirectory(dir="build/build"))

            if 'perfSlave' in self.base_config:
                c['workers'].append(worker.Worker(self.base_config['perfSlave'], PASSWORDS[self.base_config['perfSlave']], properties=self.base_config))

            c['schedulers'].append(schedulers.Triggerable(name="perf-{}".format(self.name), builderNames=["perf-{}".format(self.name)]))
            c['builders'].append(util.BuilderConfig(name="perf-{}".format(self.name),
              workernames=[self.base_config['perfSlave']] if 'perfSlave' in self.base_config else self.build_workers,
              factory=perf_factory))
            force_builders.append("perf-{}".format(self.name))

        if 'perf' in self.base_config:
            addPerf()

cov_factory = util.BuildFactory()
cov_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental'))
cov_factory.addStep(steps.MakeDirectory(dir="build/build"))
cov_factory.addStep(steps.ShellCommand(name="Configure",
    command=["cmake", "..",
        util.Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        util.Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_DS=%(prop:medusa:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Configure Cov", command=["cov-configure", "--comptype", "gcc", "--compiler", util.Property("cov-compiler"), "--config", "cov.conf", "--", util.Interpolate("--sysroot=%(prop:root)s")], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Build", command=["cov-build", "--dir", "cov-int", "--config", "cov.conf", "make"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Archive", command=["gtar", "cJf", "cov-int.tar.xz", "cov-int"], env={ "XZ_OPT": "-9e" }, workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Upload", command=["curl", "--form", "token={}".format(COV_TOKEN),
        "--form", "email=jeffrey@endrift.com",
        "--form", "file=@cov-int.tar.xz",
        "--form", util.Interpolate("version=\"%(prop:date)s\""),
        "--form", "description=\"Nightly\"",
        "https://scan.coverity.com/builds?project=mgba-emu%2Fmgba"], workdir="build/build"))
cov_factory.addStep(steps.RemoveDirectory(dir="build/build"))

analyze_factory = util.BuildFactory()
analyze_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental'))
analyze_factory.addStep(steps.MakeDirectory(dir="build/build"))
analyze_factory.addStep(steps.ShellCommand(name="Configure",
    command=["scan-build36", "cmake", "..", "-DCMAKE_BUILD_TYPE=Debug",
        util.Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        util.Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        "-DBUILD_QT=OFF", # Clang is not so good at the Qt front-end, for some reason
        "-USE_LZMA=OFF", # LZMA SDK is way too full of bad code
        util.Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_DS=%(prop:medusa:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(steps.Compile(command=["scan-build36", "-o", "clang-results", "make"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(steps.ShellCommand(name="Archive", command=["tar", "cvzf", "../clang-results.tar.gz", "clang-results"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(steps.RemoveDirectory(dir="build/build"))
analyze_factory.addStep(steps.FileUpload(workersrc="clang-results.tar.gz", masterdest=util.Interpolate("../archive/scan-build/clang-results-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))

import yaml
with open('builders.yml') as b:
    buildersDesc = yaml.load(b)

for desc in buildersDesc:
    b = Builder(desc['name'])
    b.setBaseConfig(desc['baseConfig'])
    if 'builders' in desc:
        b.setBuilders(desc['builders'])
    if 'configs' in desc:
        b.setConfigs(desc['configs'])
    b.collect()

c['builders'].extend([
    util.BuilderConfig(name="analyze-freebsd",
        workernames=default_workers,
        factory=analyze_factory)])

build = schedulers.AnyBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch_re='master|optimization/.*|\d+\.\d+(\.\d+)?'),
    treeStableTimer=None,
    builderNames=builders)
medusa = schedulers.SingleBranchScheduler(
    name="medusa",
    change_filter=util.ChangeFilter(branch='medusa'),
    treeStableTimer=None,
    builderNames=medusa_builders)
force = schedulers.ForceScheduler(
    name="force",
    builderNames=force_builders)

c['schedulers'].extend([build, medusa, force])
####### STATUS TARGETS

c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': {},
        'console_view': {}
    },
    'auth': util.UserPasswordAuth({'mgba': WEB_PASSWORD}),
    'authz': util.Authz(
        stringsMatcher=util.fnmatchStrMatcher,
        allowRules=[
            util.AnyControlEndpointMatcher(role="admins", defaultDeny=True)
        ],
        roleMatchers=[
            util.RolesFromUsername(roles=["admins"], usernames=["mgba"])
        ]
    )
}

c['services'] = [
    reporters.MailNotifier(fromaddr="mgba-buildbot@endrift.com",
        sendToInterestedUsers=False,
        relayhost="endrift.com",
        smtpPort=587,
        mode='failing',
        extraRecipients=["vi@endrift.com"]),
    reporters.IRC(host=IRC_SERVER, nick="Stheno",
        useSSL=True,
        port=6697,
        channels=[{"channel": "#medusa-dev"}],
        password=IRC_PASSWORD,
        notify_events={
            'exception': True,
            'successToFailure': True,
            'failureToSuccess': True})
]

####### PROJECT IDENTITY

c['title'] = "mGBA"
c['buildbotURL'] = "https://buildbot.mgba.io/"
c['buildbotNetUsageData'] = None

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
