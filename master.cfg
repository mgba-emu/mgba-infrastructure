# -*- python -*-
# ex: set syntax=python: ts=4 et

from .tokens import *

repo = 'https://github.com/mgba-emu/mgba.git'

c = BuildmasterConfig = {}

####### BUILDSLAVES

C7ZA = ["7za", "a", "-t7z", "-m0=lzma", "-mx=9", "-mfb=64", "-md=32m", "-ms=on"]

from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave("vulpes-a8", PASSWORDS["vulpes-a8"], properties={
        'root': '/opt/roots/bbb',
        'arch': 'armv7-linux-gnueabihf-bbb',
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/bbb.cmake',
        'perf': True,
        'bbb': True}),
    BuildSlave("vulpes-freebsd", PASSWORDS["vulpes-freebsd"], properties={
        'frontends': True,
        'perf': True,
        'arch': 'x86_64-freebsd-amd64'}),
    BuildSlave("vulpes-osx", PASSWORDS["vulpes-osx"], properties={
        'root': '/opt/roots/osx-self',
        'deps': '/home/buildbot/deps/osx.tar.gz',
        'files': ['Applications/mGBA.app', 'share/doc/mGBA/CHANGES', 'README.html'],
        'arch': 'x86_64-apple-darwin13',
        'platform': 'osx',
        'frontends': True,
        'package': ["gtar", "cJf"],
        'ext': 'tar.xz',
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/osx.cmake'}),
    BuildSlave("vulpes-rpi", PASSWORDS["vulpes-rpi"], properties={
        'cmake-flags': ['-DUSE_ZLIB=OFF', '-DUSE_PNG=OFF'],
        'root': '/opt/roots/rpi',
        'arch': 'armv6-linux-gnueabihf-rpi',
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/rpi.cmake',
        'perf': True,
        'rpi': True}),
    BuildSlave("vulpes-win32", PASSWORDS["vulpes-win32"], properties={
        'root': '/opt/roots/win32',
        'deps': '/home/buildbot/deps/win32.tar.gz',
        'files': ['bin/mGBA.exe', 'lib/libmgba.dll', 'CHANGES.txt', 'README.html', 'share/mgba/shaders', 'share/mgba/nointro.dat'],
        'arch': 'i686-w64-mingw32',
        'platform': 'win32',
        'frontends': True,
        'package': C7ZA,
        'ext': '7z',
        'license': 'LICENSE.txt',
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/win32.cmake'}),
    BuildSlave("vulpes-ubuntu64", PASSWORDS["vulpes-ubuntu64"], properties={
        'root': '/opt/roots/ubuntu64-trusty',
        'files': ['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
        'arch': 'x86_64-ubuntu-linux-gnu',
        'platform': 'ubuntu64-trusty',
        'frontends': True,
        'package': ["gtar", "cJf"],
        'ext': 'tar.xz',
        'deb': True,
        'cov-compiler': '/usr/local/bin/x86_64-linux-gnu-gcc',
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/ubuntu64-trusty.cmake'}),
    BuildSlave("vulpes-ubuntu64-vivid", PASSWORDS["vulpes-ubuntu64-vivid"], properties={
        'root': '/opt/roots/ubuntu64-vivid',
        'files': ['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
        'arch': 'x86_64-ubuntu-linux-gnu',
        'platform': 'ubuntu64-vivid',
        'frontends': True,
        'package': ["gtar", "cJf"],
        'ext': 'tar.xz',
        'deb': True,
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/ubuntu64-vivid.cmake'}),
    BuildSlave("vulpes-ubuntu64-wily", PASSWORDS["vulpes-ubuntu64-wily"], properties={
        'root': '/opt/roots/ubuntu64-wily',
        'files': ['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
        'arch': 'x86_64-ubuntu-linux-gnu',
        'platform': 'ubuntu64-wily',
        'frontends': True,
        'package': ["gtar", "cJf"],
        'ext': 'tar.xz',
        'deb': True,
        'toolchain': '/home/buildbot/mgba-infrastructure/toolchains/ubuntu64-wily.cmake'}),
    BuildSlave("vulpes-3ds", PASSWORDS["vulpes-3ds"], properties={
        'files': ['mgba.3dsx', 'mgba.smdh', 'mgba.cia'],
        'arch': 'armv6-none-eabi',
        'platform': '3ds',
        'package': C7ZA,
        'ext': '7z',
        'license': 'LICENSE.txt',
        'toolchain': '../src/platform/3ds/CMakeToolchain.txt'}),
    BuildSlave("vulpes-psp2", PASSWORDS["vulpes-psp2"], properties={
        'files': ['mgba.velf'],
        'arch': 'armv7-vita-eabi',
        'platform': 'vita',
        'package': C7ZA,
        'ext': '7z',
        'license': 'LICENSE.txt',
        'toolchain': '../src/platform/psp2/CMakeToolchain.vitasdk'}),
    BuildSlave("vulpes-wii", PASSWORDS["vulpes-wii"], properties={
        'files': ['boot.dol', 'meta.xml', 'icon.png'],
        'arch': 'powerpc-none-eabi',
        'platform': 'wii',
        'package': C7ZA,
        'ext': '7z',
        'license': 'LICENSE.txt',
        'toolchain': '../src/platform/wii/CMakeToolchain.txt'}),
    BuildSlave("nigrata", PASSWORDS["nigrata"], properties={
        'arch': 'armv7-linux-gnueabihf-bbb'}),
    BuildSlave("flavescens", PASSWORDS["flavescens"], properties={
        'arch': 'armv6-linux-gnueabihf-rpi'})
]

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = [
    GitPoller(repo, workdir='gitpoller-workdir', branches=True, pollinterval=60),
]

####### SCHEDULERS

from buildbot.schedulers.basic import AnyBranchScheduler, Dependent
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import NightlyTriggerable
from buildbot.changes import filter
import datetime

build = AnyBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch_re='master|optimization/.*|\d+\.\d+(\.\d+)?'),
    treeStableTimer=None,
    builderNames=[
        "build-3ds",
        "build-bbb",
        "build-freebsd",
        "build-osx",
        "build-psp2",
        "build-rpi",
        "build-win32",
        "build-ubuntu64",
        "build-ubuntu64-vivid",
        "build-ubuntu64-wily",
        "build-wii",
        "analyze-freebsd"])
force = ForceScheduler(
    name="force",
    builderNames=[
        "build-3ds",
        "build-bbb",
        "build-freebsd",
        "build-osx",
        "build-wii",
        "build-rpi",
        "build-win32",
        "build-ubuntu64",
        "build-ubuntu64-vivid",
        "build-ubuntu64-wily",
        "build-wii",
        "analyze-freebsd",
        "nightly-3ds",
        "nightly-osx",
        "nightly-psp2",
        "nightly-ubuntu64",
        "nightly-ubuntu64-vivid",
        "nightly-ubuntu64-wily",
        "nightly-win32",
        "nightly-wii",
        "package-3ds",
        "package-osx",
        "package-psp2",
        "package-ubuntu64",
        "package-ubuntu64-vivid",
        "package-ubuntu64-wily",
        "package-win32",
        "package-wii",
        "perf-bbb",
        "perf-rpi"
])
perf = Dependent(
    name="perf",
    upstream=build,
    builderNames=["perf-bbb", "perf-rpi"])
nightly = NightlyTriggerable(
    name="nightly",
    builderNames=[
        "nightly-3ds",
        "nightly-osx",
        "nightly-psp2",
        "nightly-ubuntu64",
        "nightly-ubuntu64-vivid",
        "nightly-ubuntu64-wily",
        "nightly-win32",
        "nightly-wii",
        "nightly-cov-ubuntu64"],
    hour=12,
    minute=50)
c['schedulers'] = [build, force, perf, nightly]

c['mergeRequests'] = False

####### BUILDERS

import os

path = os.environ['HOME'] + '/bin:' + os.environ['PATH']

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate, Property, renderer
from buildbot.status.results import SKIPPED
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.slave import MakeDirectory, RemoveDirectory
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.trigger import Trigger


def isMaster(step):
    return step.build.getProperty('branch', 'not-master') == 'master'

def hasPlatform(step):
    return step.build.hasProperty('platform')

def isDeb(step):
    return step.build.hasProperty('deb')

def hasDeps(step):
    return step.build.hasProperty('deps')

build_factory = BuildFactory()
build_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
build_factory.addStep(MakeDirectory(dir="build/build"))
build_factory.addStep(ShellCommand(name="Configure",
    command=["cmake", "..",
        Interpolate("-DBUILD_PERF=%(prop:perf:?|ON|OFF)s"),
        "-DCMAKE_BUILD_TYPE=Release",
        "-DCMAKE_INSTALL_PREFIX=/",
        "-DCPACK_PACKAGE_FILE_NAME=build",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Property("cmake-flags", default=[]),
    ],
    workdir="build/build", haltOnFailure=True))
build_factory.addStep(Compile(command=["make", "-j4"], workdir="build/build", haltOnFailure=True))
build_factory.addStep(ShellCommand(name="Archive", command=["cpack", "-G", Interpolate("%(prop:deb:?|DEB|TGZ)s")], workdir="build/build", haltOnFailure=True))
build_factory.addStep(ShellCommand(name="Sanitize", command=["fakeroot", "../tools/sanitize-deb.sh", "build-libmgba.deb", "build-mgba-sdl.deb", "build-mgba-qt.deb"], workdir="build/build", env={'PATH': path}, doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(MakeDirectory(dir="build/build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-libmgba.deb", "build/libmgba.deb"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-sdl.deb", "build/mgba-sdl.deb"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-qt.deb", "build/mgba-qt.deb"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Bundle", command=["tar", "czf", "build.tar.gz", "build"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(FileUpload(workdir="build/build", slavesrc=Interpolate("build.tar.gz"), masterdest=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))
build_factory.addStep(RemoveDirectory(dir="build/build"))
build_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")], haltOnFailure=True))
build_factory.addStep(Trigger(schedulerNames=["nightly"], doStepIf=lambda s: isMaster(s) and hasPlatform(s), hideStepIf=lambda results, s: not hasPlatform(s)))

perf_factory = BuildFactory()
perf_factory.addStep(FileDownload(mastersrc=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
perf_factory.addStep(ShellCommand(name="Unarchive", command=["tar", "xzf", "archive.tar.gz"], haltOnFailure=True))
perf_factory.addStep(ShellCommand(name="Profile (software renderer)",
    command=["python", "-u", "../lib/mgba/perf.py",
        "-w", "60",
        "-g", "0",
        "-o",
        "../../results.csv",
        "../../roms"],
    env={
        "LD_LIBRARY_PATH": "../lib"
    }, workdir="build/build/bin", haltOnFailure=True))
perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("../archive/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-software.csv")))
perf_factory.addStep(ShellCommand(name="Profile (no renderer)",
    command=["python", "-u", "../lib/mgba/perf.py",
        "-Nw", "60",
        "-g", "0",
        "-o",
        "../../results.csv",
        "../../roms"],
    env={
        "LD_LIBRARY_PATH": "../lib"
    }, workdir="build/build/bin", haltOnFailure=True))
perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("../archive/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-none.csv"), mode=0644))
perf_factory.addStep(RemoveDirectory(dir="build/build"))

@renderer
def date(props):
    d = datetime.datetime.utcnow()
    return d.strftime("%Y-%m-%d")

package_name = "mGBA-%(prop:package-name)s-%(prop:date)s-%(prop:platform)s%(prop:include-hash:+-%(prop:revision)s)s"

package_factory = BuildFactory()
package_factory.addStep(FileDownload(mastersrc=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
package_factory.addStep(FileDownload(mastersrc=Interpolate("%(prop:deps)s"), slavedest="deps.tar.gz", haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
package_factory.addStep(SetProperty(property="date", value=Interpolate("%(kw:date)s", date=date)))
package_factory.addStep(MakeDirectory(dir=Interpolate("build/" + package_name)))
package_factory.addStep(ShellCommand(name="Unarchive build", command=["tar", "xzf", "archive.tar.gz"], haltOnFailure=True))
package_factory.addStep(ShellCommand(name="Unarchive deps", command=["tar", "xzf", "deps.tar.gz", "-C", Interpolate(package_name)], haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
package_factory.addStep(ShellCommand(name="Generate README", workdir="build/build", command=["bash", "-c", "echo '<meta charset=\"UTF-8\">' > README.html; markdown share/doc/mGBA/README.md >> README.html"], haltOnFailure=True))
package_factory.addStep(ShellCommand(name="Generate CHANGES", workdir="build/build", command=["bash", "-c", "cat share/doc/mGBA/CHANGES | unix2dos > CHANGES.txt"], haltOnFailure=True))
package_factory.addStep(ShellCommand(name="Move build products", workdir="build/build", command=["mv", Property("files"), Interpolate("../" + package_name)], haltOnFailure=True))
package_factory.addStep(ShellCommand(name="Copy resources", command=["cp", Interpolate("%(prop:license:-LICENSE)s"), Interpolate(package_name)], haltOnFailure=True))
package_factory.addStep(ShellCommand(name="Repackage", command=[Property("package"), Interpolate("package.%(prop:ext)s"), Interpolate(package_name)], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
package_factory.addStep(RemoveDirectory(dir=Interpolate("build/" + package_name)))
package_factory.addStep(FileUpload(name="Upload to archive", slavesrc=Interpolate("package.%(prop:ext)s"), masterdest=Interpolate("../archive/" + package_name + ".%(prop:ext)s")))
package_factory.addStep(ShellCommand(name="Clean", command=["rm", "-f", Interpolate("package.%(prop:ext)s")]))
package_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("../archive/" + package_name + ".%(prop:ext)s")], haltOnFailure=True))
package_factory.addStep(MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", Interpolate("%(prop:package-type:-%(prop:package-name)s)s/"), Interpolate("../archive/" + package_name + ".%(prop:ext)s"), Interpolate("mGBA-%(prop:package-name)s-latest-%(prop:platform)s.%(prop:ext)s")], haltOnFailure=True))

cov_factory = BuildFactory()
cov_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
cov_factory.addStep(MakeDirectory(dir="build/build"))
cov_factory.addStep(ShellCommand(name="Configure",
    command=["cmake", "..",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Configure Cov", command=["cov-configure", "--comptype", "gcc", "--compiler", Property("cov-compiler"), "--config", "cov.conf", "--", Interpolate("--sysroot=%(prop:root)s")], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Build", command=["cov-build", "--dir", "cov-int", "--config", "cov.conf", "make"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Archive", command=["gtar", "cJf", "cov-int.tar.xz", "cov-int"], env={ "XZ_OPT": "-9e" }, workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Upload", command=["curl", "--form", "token={}".format(COV_TOKEN),
        "--form", "email=jeffrey@endrift.com",
        "--form", "file=@cov-int.tar.xz",
        "--form", Interpolate("version=\"%(prop:date)s\""),
        "--form", "description=\"Nightly\"",
        "https://scan.coverity.com/builds?project=mgba-emu%2Fmgba"], workdir="build/build"))
cov_factory.addStep(RemoveDirectory(dir="build/build"))

analyze_factory = BuildFactory()
analyze_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
analyze_factory.addStep(MakeDirectory(dir="build/build"))
analyze_factory.addStep(ShellCommand(name="Configure",
    command=["scan-build36", "cmake", "..", "-DCMAKE_BUILD_TYPE=Debug",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        "-DBUILD_QT=OFF", # Clang is not so good at the Qt front-end, for some reason
        "-USE_LZMA=OFF", # LZMA SDK is way too full of bad code
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(ShellCommand(name="Build", command=["scan-build36", "-o", "clang-results", "make"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(ShellCommand(name="Archive", command=["tar", "czf", "../clang-results.tar.gz", "clang-results"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(RemoveDirectory(dir="build/build"))
analyze_factory.addStep(FileUpload(slavesrc=Interpolate("clang-results.tar.gz"), masterdest=Interpolate("../archive/clang-results-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))

from buildbot.config import BuilderConfig

c['builders'] = [
    BuilderConfig(name="build-3ds",
      slavenames=["vulpes-3ds"],
      env={'DEVKITPRO': '/opt/devkitPro'},
      factory=build_factory),
    BuilderConfig(name="build-bbb",
      slavenames=["vulpes-a8"],
      factory=build_factory),
    BuilderConfig(name="build-freebsd",
      slavenames=["vulpes-freebsd"],
      factory=build_factory),
    BuilderConfig(name="analyze-freebsd",
      slavenames=["vulpes-freebsd"],
      factory=analyze_factory),
    BuilderConfig(name="build-rpi",
      slavenames=["vulpes-rpi"],
      factory=build_factory),
    BuilderConfig(name="build-osx",
      slavenames=["vulpes-osx"],
      factory=build_factory),
    BuilderConfig(name="build-psp2",
      slavenames=["vulpes-psp2"],
      env={'VITASDK': '/opt/vitasdk'},
      factory=build_factory),
    BuilderConfig(name="build-win32",
      slavenames=["vulpes-win32"],
      factory=build_factory),
    BuilderConfig(name="build-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      factory=build_factory),
    BuilderConfig(name="build-ubuntu64-vivid",
      slavenames=["vulpes-ubuntu64-vivid"],
      factory=build_factory),
    BuilderConfig(name="build-ubuntu64-wily",
      slavenames=["vulpes-ubuntu64-wily"],
      factory=build_factory),
    BuilderConfig(name="build-wii",
      slavenames=["vulpes-wii"],
      env={'DEVKITPRO': '/opt/devkitPro'},
      factory=build_factory),
    BuilderConfig(name="nightly-3ds",
      slavenames=["vulpes-3ds"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-osx",
      slavenames=["vulpes-osx"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-psp2",
      slavenames=["vulpes-psp2"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-ubuntu64-vivid",
      slavenames=["vulpes-ubuntu64-vivid"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-ubuntu64-wily",
      slavenames=["vulpes-ubuntu64-wily"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-cov-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=cov_factory),
    BuilderConfig(name="nightly-win32",
      slavenames=["vulpes-win32"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="nightly-wii",
      slavenames=["vulpes-wii"],
      properties={'package-name': 'nightly', 'include-hash': True},
      factory=package_factory),
    BuilderConfig(name="package-3ds",
      slavenames=["vulpes-3ds"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-osx",
      slavenames=["vulpes-osx"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-psp2",
      slavenames=["vulpes-psp2"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-ubuntu64-vivid",
      slavenames=["vulpes-ubuntu64-vivid"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-ubuntu64-wily",
      slavenames=["vulpes-ubuntu64-wily"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-win32",
      slavenames=["vulpes-win32"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="package-wii",
      slavenames=["vulpes-wii"],
      properties={'package-name': Property('branch')},
      factory=package_factory),
    BuilderConfig(name="perf-bbb",
      slavenames=["nigrata"],
      factory=perf_factory),
    BuilderConfig(name="perf-rpi",
      slavenames=["flavescens"],
      factory=perf_factory),
]

####### STATUS TARGETS

from buildbot.status import html, mail
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("mgba", WEB_PASSWORD)]),
    forceBuild = "auth",
    forceAllBuilds = "auth",
    pingBuilder = "auth",
    stopBuild = "auth",
    stopAllBuilds = "auth",
    cancelPendingBuild = "auth",
)
c['status'] = [
    html.WebStatus(http_port=8010, authz=authz_cfg),
    mail.MailNotifier(fromaddr="mgba-buildbot@endrift.com",
		sendToInterestedUsers=False,
		relayhost="endrift.com",
		smtpPort=587,
		mode='failing',
		extraRecipients=["jeffrey@endrift.com"])
]

####### PROJECT IDENTITY

c['title'] = "mGBA"
c['buildbotURL'] = "http://buildbot.mgba.io/"

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
