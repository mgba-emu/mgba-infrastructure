# -*- python -*-
# ex: set syntax=python: ts=4 et

from .tokens import *

repo = 'https://github.com/mgba-emu/mgba.git'

c = BuildmasterConfig = {}

####### BUILDSLAVES

C7ZA = ["7za", "a", "-t7z", "-m0=lzma", "-mx=9", "-mfb=64", "-md=32m", "-ms=on"]

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = [
    GitPoller(repo, workdir='gitpoller-workdir', branches=True, pollinterval=60),
]

####### SCHEDULERS

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import NightlyTriggerable
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
import datetime

c['schedulers'] = []
c['mergeRequests'] = False

builders = ['analyze-freebsd']
forceBuilders = ['analyze-freebsd']
nightlyBuilders = ['nightly-cov-ubuntu64']

####### BUILDERS

import os

path = os.environ['HOME'] + '/bin:' + os.environ['PATH']
env = {
    'DEVKITPRO': '/opt/devkitPro',
    'VITASDK': '/opt/vitasdk'
}

c['builders'] = []

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate, Property, renderer
from buildbot.status.results import SKIPPED
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.slave import MakeDirectory, RemoveDirectory
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.trigger import Trigger

def isMaster(step):
    return step.build.getProperty('branch', 'not-master') == 'master'

def hasPlatform(step):
    return step.build.hasProperty('platform')

def hasDeps(step):
    return step.build.hasProperty('deps')

@renderer
def date(props):
    d = datetime.datetime.utcnow()
    return d.strftime("%Y-%m-%d")

@renderer
def isPerf(step):
    if not step.build.hasProperty('perf'):
        return '-DBUILD_PERF=OFF'
    branch = step.build.getProperty('branch', 'not-master')
    if branch == 'master' or branch.startswith('optimization/'):
        return '-DBUILD_PERF=ON'
    return '-DBUILD_PERF=OFF'

def addBuilder(name, **kwargs):
    props = dict(kwargs)
    bs = BuildSlave("vulpes-{}".format(name), PASSWORDS["vulpes-{}".format(name)], properties=kwargs)

    build_factory = BuildFactory()
    build_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
    build_factory.addStep(MakeDirectory(dir="build/build"))
    build_factory.addStep(ShellCommand(name="Configure",
        command=["cmake", "..",
            isPerf,
            "-DCMAKE_BUILD_TYPE=Release",
            "-DCPACK_PACKAGE_FILE_NAME=build",
            Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
            Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
            Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
            Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
            Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
            Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
            Interpolate("-DBUILD_STATIC=%(prop:static:?|ON|OFF)s"),
            Interpolate("-DBUILD_SHARED=%(prop:static:?|OFF|ON)s"),
            Property("cmakeFlags", default=[]),
        ],
        workdir="build/build", haltOnFailure=True))
    build_factory.addStep(Compile(command=["make", "-j4"], workdir="build/build", haltOnFailure=True))
    build_factory.addStep(ShellCommand(name="Archive", command=["cpack", "-V", "-G", "TGZ" if 'deb' not in kwargs else "DEB"], workdir="build/build", haltOnFailure=True))
    if 'deb' in kwargs:
        build_factory.addStep(ShellCommand(name="Sanitize", command=["fakeroot", "../tools/sanitize-deb.sh", "build-libmgba.deb", "build-mgba-sdl.deb", "build-mgba-qt.deb"], workdir="build/build", env={'PATH': path}))
        build_factory.addStep(MakeDirectory(dir="build/build/build"))
        build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-libmgba.deb", "build/libmgba.deb"], workdir="build/build"))
        build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-sdl.deb", "build/mgba-sdl.deb"], workdir="build/build"))
        build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-qt.deb", "build/mgba-qt.deb"], workdir="build/build"))
        build_factory.addStep(ShellCommand(name="Bundle", command=["tar", "cvzf", "build.tar.gz", "build"], workdir="build/build"))
    build_factory.addStep(FileUpload(workdir="build/build", slavesrc=Interpolate("build.tar.gz"), masterdest=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))
    build_factory.addStep(RemoveDirectory(dir="build/build"))
    build_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")], haltOnFailure=True))
    build_factory.addStep(Trigger(schedulerNames=["perf-{}".format(name)], doStepIf=lambda s: isPerf.getRenderingFor(s) == '-DBUILD_PERF=ON', hideStepIf=lambda results, s: not s.build.hasProperty('perf')))
    build_factory.addStep(Trigger(schedulerNames=["nightly"], doStepIf=lambda s: isMaster(s) and hasPlatform(s), hideStepIf=lambda results, s: not hasPlatform(s)))

    c['builders'].append(BuilderConfig(name="build-{}".format(name),
      slavenames=["vulpes-{}".format(name)],
      env=env,
      factory=build_factory))
    builders.append("build-{}".format(name))
    forceBuilders.append("build-{}".format(name))

    if 'package' in kwargs:
        package_name = "mGBA-%(prop:package-name)s-%(prop:date)s-%(prop:platform)s%(prop:include-hash:+-%(prop:revision)s)s"

        package_factory = BuildFactory()
        package_factory.addStep(FileDownload(mastersrc=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
        package_factory.addStep(FileDownload(mastersrc=Interpolate("%(prop:deps)s"), slavedest="deps.tar.gz", haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
        package_factory.addStep(SetProperty(property="date", value=Interpolate("%(kw:date)s", date=date)))
        package_factory.addStep(MakeDirectory(dir=Interpolate("build/" + package_name)))
        package_factory.addStep(ShellCommand(name="Unarchive build", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
        package_factory.addStep(ShellCommand(name="Unarchive deps", command=["tar", "xvzf", "deps.tar.gz", "-C", Interpolate(package_name)], haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
        package_factory.addStep(ShellCommand(name="Generate README", workdir="build/build", command=["bash", "-c", "echo '<meta charset=\"UTF-8\">' > README.html; markdown share/doc/mGBA/README.md >> README.html"], haltOnFailure=True))
        package_factory.addStep(ShellCommand(name="Generate CHANGES", workdir="build/build", command=["bash", "-c", "cat share/doc/mGBA/CHANGES | unix2dos > CHANGES.txt"], haltOnFailure=True))
        package_factory.addStep(ShellCommand(name="Move build products", workdir="build/build", command=["mv", Property("files"), Interpolate("../" + package_name)], haltOnFailure=True))
        package_factory.addStep(ShellCommand(name="Copy resources", command=["cp", Interpolate("%(prop:license:-LICENSE)s"), Interpolate(package_name)], haltOnFailure=True))
        package_factory.addStep(ShellCommand(name="Repackage", command=[Property("package"), Interpolate("package.%(prop:ext)s"), Interpolate(package_name)], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
        package_factory.addStep(RemoveDirectory(dir=Interpolate("build/" + package_name)))
        package_factory.addStep(FileUpload(name="Upload to archive", slavesrc=Interpolate("package.%(prop:ext)s"), masterdest=Interpolate("../archive/" + package_name + ".%(prop:ext)s")))
        package_factory.addStep(ShellCommand(name="Clean", command=["rm", "-f", Interpolate("package.%(prop:ext)s")]))
        package_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("../archive/" + package_name + ".%(prop:ext)s")], haltOnFailure=True))
        package_factory.addStep(MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", Interpolate("%(prop:package-type:-%(prop:package-name)s)s/"), Interpolate("../archive/" + package_name + ".%(prop:ext)s"), Interpolate("mGBA-%(prop:package-name)s-latest-%(prop:platform)s.%(prop:ext)s")], haltOnFailure=True))

        c["builders"].extend([
            BuilderConfig(name="nightly-{}".format(name),
                slavenames=["vulpes-{}".format(name)],
                properties={'package-name': 'nightly', 'include-hash': True},
                factory=package_factory),
            BuilderConfig(name="package-{}".format(name),
                slavenames=["vulpes-{}".format(name)],
                properties={'package-name': Property('branch')},
                 factory=package_factory),
        ])
        nightlyBuilders.append("nightly-{}".format(name))
        forceBuilders.extend(["nightly-{}".format(name), "package-{}".format(name)])
    if 'perf' in kwargs:
        addPerf(name, **kwargs)

    c['slaves'].append(bs)

def addPerf(name, **kwargs):
    perf_factory = BuildFactory()
    perf_factory.addStep(FileDownload(mastersrc=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
    perf_factory.addStep(ShellCommand(name="Unarchive", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
    perf_factory.addStep(ShellCommand(name="Profile (software renderer)",
        command=["python", "-u", "../lib/mgba/perf.py",
            "-w", "0",
            "-g", "4800",
            Property("profileServerCommand", default=[]),
            Property("profileServerAddress", default=[]),
            "-o",
            "../../results.csv",
            "../../roms"],
        env={
            "LD_LIBRARY_PATH": "../lib"
        }, workdir="build/build/bin", haltOnFailure=True))
    perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("../archive/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-software.csv")))
    perf_factory.addStep(ShellCommand(name="Profile (no renderer)",
        command=["python", "-u", "../lib/mgba/perf.py",
            "-Nw", "0",
            "-g", "4800",
            Property("profileServerCommand", default=[]),
            Property("profileServerAddress", default=[]),
            "-o",
            "../../results.csv",
            "../../roms"],
        env={
            "LD_LIBRARY_PATH": "../lib"
        }, workdir="build/build/bin", haltOnFailure=True))
    perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("../archive/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-none.csv"), mode=0644))
    perf_factory.addStep(RemoveDirectory(dir="build/build"))

    if 'perfSlave' in kwargs:
        c['slaves'].append(BuildSlave(kwargs['perfSlave'], PASSWORDS[kwargs['perfSlave']], properties=kwargs))

    c['schedulers'].append(Triggerable(name="perf-{}".format(name), builderNames=["perf-{}".format(name)]))
    c['builders'].append(BuilderConfig(name="perf-{}".format(name),
      slavenames=[kwargs['perfSlave'] if 'perfSlave' in kwargs else "vulpes-{}".format(name)],
      factory=perf_factory))
    forceBuilders.append("perf-{}".format(name))

cov_factory = BuildFactory()
cov_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
cov_factory.addStep(MakeDirectory(dir="build/build"))
cov_factory.addStep(ShellCommand(name="Configure",
    command=["cmake", "..",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Configure Cov", command=["cov-configure", "--comptype", "gcc", "--compiler", Property("cov-compiler"), "--config", "cov.conf", "--", Interpolate("--sysroot=%(prop:root)s")], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Build", command=["cov-build", "--dir", "cov-int", "--config", "cov.conf", "make"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Archive", command=["gtar", "cJf", "cov-int.tar.xz", "cov-int"], env={ "XZ_OPT": "-9e" }, workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Upload", command=["curl", "--form", "token={}".format(COV_TOKEN),
        "--form", "email=jeffrey@endrift.com",
        "--form", "file=@cov-int.tar.xz",
        "--form", Interpolate("version=\"%(prop:date)s\""),
        "--form", "description=\"Nightly\"",
        "https://scan.coverity.com/builds?project=mgba-emu%2Fmgba"], workdir="build/build"))
cov_factory.addStep(RemoveDirectory(dir="build/build"))

analyze_factory = BuildFactory()
analyze_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
analyze_factory.addStep(MakeDirectory(dir="build/build"))
analyze_factory.addStep(ShellCommand(name="Configure",
    command=["scan-build36", "cmake", "..", "-DCMAKE_BUILD_TYPE=Debug",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        "-DBUILD_QT=OFF", # Clang is not so good at the Qt front-end, for some reason
        "-USE_LZMA=OFF", # LZMA SDK is way too full of bad code
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(Compile(command=["scan-build36", "-o", "clang-results", "make"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(ShellCommand(name="Archive", command=["tar", "cvzf", "../clang-results.tar.gz", "clang-results"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(RemoveDirectory(dir="build/build"))
analyze_factory.addStep(FileUpload(slavesrc=Interpolate("clang-results.tar.gz"), masterdest=Interpolate("../archive/clang-results-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))

from buildbot.config import BuilderConfig

addBuilder('bbb',
    root='/opt/roots/bbb',
    arch='armv7-linux-gnueabihf-bbb',
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/bbb.cmake',
    perf=True,
    perfSlave='nigrata',
    bbb=True)
addBuilder('freebsd',
    frontends=True,
    arch='x86_64-freebsd-amd64')
addBuilder('osx',
    root='/opt/roots/osx-self',
    deps='/home/buildbot/deps/osx.tar.gz',
    files=['Applications/mGBA.app', 'share/doc/mGBA/CHANGES', 'README.html'],
    arch='x86_64-apple-darwin13',
    platform='osx',
    frontends=True,
    static=True,
    package=["gtar", "cJf"],
    ext='tar.xz',
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/osx.cmake')
addBuilder('rpi',
    cmakeFlags=['-DUSE_ZLIB=OFF', '-DUSE_PNG=OFF'],
    root='/opt/roots/rpi',
    arch='armv6-linux-gnueabihf-rpi',
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/rpi.cmake',
    perf=True,
    perfSlave='flavescens',
    rpi=True)
addBuilder('win32',
    root='/opt/roots/win32',
    deps='/home/buildbot/deps/win32.tar.gz',
    files=['bin/mGBA.exe', 'CHANGES.txt', 'README.html', 'share/mgba/shaders', 'share/mgba/nointro.dat'],
    arch='i686-w64-mingw32',
    platform='win32',
    frontends=True,
    static=True,
    package=C7ZA,
    ext='7z',
    license='LICENSE.txt',
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/win32.cmake')
addBuilder('ubuntu64',
    root='/opt/roots/ubuntu64-trusty',
    files=['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
    arch='x86_64-ubuntu-linux-gnu',
    platform='ubuntu64-trusty',
    frontends=True,
    package=["gtar", "cJf"],
    ext='tar.xz',
    deb=True,
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/ubuntu64-trusty.cmake')
addBuilder('ubuntu64-wily',
    root='/opt/roots/ubuntu64-wily',
    files=['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
    arch='x86_64-ubuntu-linux-gnu',
    platform='ubuntu64-wily',
    frontends=True,
    package=["gtar", "cJf"],
    ext='tar.xz',
    deb=True,
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/ubuntu64-wily.cmake')
addBuilder('ubuntu64-xenial',
    root='/opt/roots/ubuntu64-xenial',
    files=['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
    arch='x86_64-ubuntu-linux-gnu',
    platform='ubuntu64-xenial',
    frontends=True,
    package=["gtar", "cJf"],
    ext='tar.xz',
    deb=True,
    toolchain='/home/buildbot/mgba-infrastructure/toolchains/ubuntu64-xenial.cmake')
addBuilder('3ds',
    files=['mgba.3dsx', 'mgba.smdh', 'mgba.cia'],
    perf=True,
    arch='armv6-none-eabi',
    platform='3ds',
    static=True,
    package=C7ZA,
    ext='7z',
    license='LICENSE.txt',
    toolchain='../src/platform/3ds/CMakeToolchain.txt',
    profileServerCommand=['-S', '/opt/devkitPro/devkitARM/bin/3dslink -a 192.168.1.130 ../mgba-perf.3dsx --arg0 sdmc:/3ds/mgba-perf.3dsx'],
    profileServerAddress=['-s', '192.168.1.130:7216'])
addBuilder('psp2',
    files=['mgba.vpk'],
    arch='armv7-vita-eabi',
    platform='vita',
    static=True,
    package=C7ZA,
    ext='7z',
    license='LICENSE.txt',
    toolchain='../src/platform/psp2/CMakeToolchain.vitasdk')
addBuilder('wii',
    files=['boot.dol', 'meta.xml', 'icon.png'],
    arch='powerpc-none-eabi',
    platform='wii',
    static=True,
    package=C7ZA,
    ext='7z',
    license='LICENSE.txt',
    toolchain='../src/platform/wii/CMakeToolchain.txt')

c['builders'].extend([
    BuilderConfig(name="nightly-cov-ubuntu64",
        slavenames=["vulpes-ubuntu64"],
        properties={'package-name': 'nightly', 'include-hash': True},
        factory=cov_factory),
    BuilderConfig(name="analyze-freebsd",
        slavenames=["vulpes-freebsd"],
        factory=analyze_factory)])

build = AnyBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch_re='master|optimization/.*|\d+\.\d+(\.\d+)?'),
    treeStableTimer=None,
    builderNames=builders)
force = ForceScheduler(
    name="force",
    builderNames=forceBuilders)
nightly = NightlyTriggerable(
    name="nightly",
    builderNames=nightlyBuilders,
    hour=12,
    minute=50)

c['schedulers'].extend([build, force, nightly])
####### STATUS TARGETS

from buildbot.status import html, mail
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("mgba", WEB_PASSWORD)]),
    forceBuild = "auth",
    forceAllBuilds = "auth",
    pingBuilder = "auth",
    stopBuild = "auth",
    stopAllBuilds = "auth",
    cancelPendingBuild = "auth",
)
c['status'] = [
    html.WebStatus(http_port=8010, authz=authz_cfg),
    mail.MailNotifier(fromaddr="mgba-buildbot@endrift.com",
		sendToInterestedUsers=False,
		relayhost="endrift.com",
		smtpPort=587,
		mode='failing',
		extraRecipients=["jeffrey@endrift.com"])
]

####### PROJECT IDENTITY

c['title'] = "mGBA"
c['buildbotURL'] = "http://buildbot.mgba.io/"

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
