# -*- python -*-
# ex: set syntax=python: ts=4 et

from .tokens import *

repo = 'https://github.com/mgba-emu/mgba.git'

c = BuildmasterConfig = {}

####### BUILDSLAVES

package = {
    '7z': ["7za", "a", "-t7z", "-m0=lzma", "-mx=9", "-mfb=64", "-md=32m", "-ms=on"],
    'tar.xz': ["gtar", "cJf"]
}

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = [
    GitPoller(repo, workdir='gitpoller-workdir', branches=True, pollinterval=60),
]

####### SCHEDULERS

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import NightlyTriggerable
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
import datetime

c['schedulers'] = []
c['mergeRequests'] = False

builders = ['analyze-freebsd']
force_builders = ['analyze-freebsd']
nightly_builders = ['nightly-cov-ubuntu64']

####### BUILDERS

import os

path = os.environ['HOME'] + '/bin:' + os.environ['PATH']
env = {
    'DEVKITPRO': '/opt/devkitPro',
    'VITASDK': '/opt/vitasdk'
}

c['builders'] = []

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate, Property, renderer
from buildbot.status.results import SKIPPED
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.slave import MakeDirectory, RemoveDirectory
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.trigger import Trigger

def isMaster(step):
    return step.build.getProperty('branch', 'not-master') == 'master'

def hasPlatform(step):
    return step.build.hasProperty('platform')

def hasDeps(step):
    return step.build.hasProperty('deps')

@renderer
def date(props):
    d = datetime.datetime.utcnow()
    return d.strftime("%Y-%m-%d")

@renderer
def isPerf(step):
    if not step.build.hasProperty('perf'):
        return '-DBUILD_PERF=OFF'
    branch = step.build.getProperty('branch', 'not-master')
    if branch == 'master' or branch.startswith('optimization/'):
        return '-DBUILD_PERF=ON'
    return '-DBUILD_PERF=OFF'

class Builder:
    def __init__(self, name):
        self.name = name
        self.build_slaves = []
        self.base_config = {}
        self.configs = []

    def setBaseConfig(self, base_config):
        self.base_config = base_config

    def setBuilders(self, builders):
        self.build_slaves = builders

    def setConfigs(self, configs):
        self.configs = configs

    def collect(self):
        slave_names = ["vulpes-{}".format(name) for name in self.build_slaves or [self.name]]
        bs = [BuildSlave(name, PASSWORDS[name], properties=self.base_config) for name in slave_names]

        build_factory = BuildFactory()
        build_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
        build_factory.addStep(MakeDirectory(dir="build/build"))
        build_factory.addStep(ShellCommand(name="Configure",
            command=["cmake", "..",
                isPerf,
                "-DCMAKE_BUILD_TYPE=Release",
                "-DCPACK_PACKAGE_FILE_NAME=build",
                Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
                Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
                Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
                Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
                Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
                Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
                Interpolate("-DBUILD_STATIC=%(prop:static:?|ON|OFF)s"),
                Interpolate("-DBUILD_SHARED=%(prop:static:?|OFF|ON)s"),
                Property("cmakeFlags", default=[]),
            ],
            workdir="build/build", haltOnFailure=True))

        def build(build_factory):
            build_factory.addStep(Compile(command=["make", "-j4"], workdir="build/build", haltOnFailure=True))
            build_factory.addStep(ShellCommand(name="Archive", command=["cpack", "-V", "-G", "TGZ" if 'deb' not in self.base_config else "DEB"], workdir="build/build", haltOnFailure=True))
            if 'deb' in self.base_config:
                build_factory.addStep(ShellCommand(name="Sanitize", command=["fakeroot", "../tools/sanitize-deb.sh", "build-libmgba.deb", "build-mgba-sdl.deb", "build-mgba-qt.deb"], workdir="build/build", env={'PATH': path}))
                build_factory.addStep(MakeDirectory(dir="build/build/build"))
                build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-libmgba.deb", "build/libmgba.deb"], workdir="build/build"))
                build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-sdl.deb", "build/mgba-sdl.deb"], workdir="build/build"))
                build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-qt.deb", "build/mgba-qt.deb"], workdir="build/build"))
                build_factory.addStep(ShellCommand(name="Bundle", command=["tar", "cvzf", "build.tar.gz", "build"], workdir="build/build"))

        build(build_factory)
        build_factory.addStep(FileUpload(workdir="build/build", slavesrc=Interpolate("build.tar.gz"), masterdest=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))
        build_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")], haltOnFailure=True))

        if 'frontends' in self.base_config:
            build_factory.addStep(ShellCommand(name="Copy Gold", command=["cp", "-r", "../gold/", "res/"], workdir="build"))
            build(build_factory)
            build_factory.addStep(FileUpload(workdir="build/build", slavesrc=Interpolate("build.tar.gz"), masterdest=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s-gold.tar.gz")))
            build_factory.addStep(MasterShellCommand(name="Fix Gold permissions", command=["chmod", "644", Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s-gold.tar.gz")], haltOnFailure=True))
            build_factory.addStep(ShellCommand(name="Deconfigure Gold", command=["git", "reset", "--hard"], workdir="build", haltOnFailure=True))

        build_factory.addStep(RemoveDirectory(dir="build/build"))
        build_factory.addStep(Trigger(schedulerNames=["perf-{}".format(self.name)], doStepIf=lambda s: isPerf.getRenderingFor(s) == '-DBUILD_PERF=ON', hideStepIf=lambda results, s: not s.build.hasProperty('perf')))
        build_factory.addStep(Trigger(schedulerNames=["nightly"], doStepIf=lambda s: isMaster(s) and hasPlatform(s), hideStepIf=lambda results, s: not hasPlatform(s)))

        configs = self.configs or [{'name': self.name}]
        for config in configs:
            c['builders'].append(BuilderConfig(name="build-{}".format(config['name']),
              slavenames=slave_names,
              env=env,
              properties=config,
              factory=build_factory))
            builders.append("build-{}".format(config['name']))
            force_builders.append("build-{}".format(config['name']))

        if 'ext' in self.base_config:
            package_name = "mGBA-%(prop:package-name)s-%(prop:date)s-%(prop:platform)s%(prop:include-hash:+-%(prop:revision)s)s"

            package_factory = BuildFactory()
            package_factory.addStep(FileDownload(mastersrc=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
            package_factory.addStep(FileDownload(mastersrc=Interpolate("%(prop:deps)s"), slavedest="deps.tar.gz", haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
            package_factory.addStep(SetProperty(property="date", value=Interpolate("%(kw:date)s", date=date)))
            package_factory.addStep(MakeDirectory(dir=Interpolate("build/" + package_name)))
            package_factory.addStep(ShellCommand(name="Unarchive build", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
            package_factory.addStep(ShellCommand(name="Unarchive deps", command=["tar", "xvzf", "deps.tar.gz", "-C", Interpolate(package_name)], haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
            package_factory.addStep(ShellCommand(name="Generate README", workdir="build/build", command=["bash", "-c", "echo '<meta charset=\"UTF-8\">' > README.html; markdown share/doc/mGBA/README.md >> README.html"], haltOnFailure=True))
            package_factory.addStep(ShellCommand(name="Generate CHANGES", workdir="build/build", command=["bash", "-c", "cat share/doc/mGBA/CHANGES | unix2dos > CHANGES.txt"], haltOnFailure=True))
            package_factory.addStep(ShellCommand(name="Move build products", workdir="build/build", command=["mv", Property("files"), Interpolate("../" + package_name)], haltOnFailure=True))
            package_factory.addStep(ShellCommand(name="Copy resources", command=["cp", Interpolate("%(prop:license:-LICENSE)s"), Interpolate(package_name)], haltOnFailure=True))
            package_factory.addStep(ShellCommand(name="Repackage", command=[Property("package"), Interpolate("package.%(prop:ext)s"), Interpolate(package_name)], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
            package_factory.addStep(RemoveDirectory(dir=Interpolate("build/" + package_name)))
            package_factory.addStep(FileUpload(name="Upload to archive", slavesrc=Interpolate("package.%(prop:ext)s"), masterdest=Interpolate("../archive/" + package_name + ".%(prop:ext)s")))
            package_factory.addStep(ShellCommand(name="Clean", command=["rm", "-f", Interpolate("package.%(prop:ext)s")]))
            package_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("../archive/" + package_name + ".%(prop:ext)s")], haltOnFailure=True))
            package_factory.addStep(MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", Interpolate("%(prop:package-type:-%(prop:package-name)s)s/"), Interpolate("../archive/" + package_name + ".%(prop:ext)s"), Interpolate("mGBA-%(prop:package-name)s-latest-%(prop:platform)s.%(prop:ext)s")], haltOnFailure=True))

            package_prop = package[self.base_config['ext']]
            for config in configs:
                c["builders"].extend([
                    BuilderConfig(name="nightly-{}".format(config['name']),
                        slavenames=slave_names,
                        properties={'package-name': 'nightly', 'include-hash': True, 'package': package_prop},
                        factory=package_factory),
                    BuilderConfig(name="package-{}".format(config['name']),
                        slavenames=slave_names,
                        properties={'package-name': Property('branch'), 'package': package_prop},
                         factory=package_factory),
                ])
                nightly_builders.append("nightly-{}".format(config['name']))
                force_builders.extend(["nightly-{}".format(config['name']), "package-{}".format(config['name'])])

        c['slaves'].extend(bs)

        def addPerf():
            perf_factory = BuildFactory()
            perf_factory.addStep(FileDownload(mastersrc=Interpolate("../archive/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
            perf_factory.addStep(ShellCommand(name="Unarchive", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
            perf_factory.addStep(ShellCommand(name="Profile (software renderer)",
                command=["python", "-u", "../lib/mgba/perf.py",
                    "-w", "0",
                    "-g", "4800",
                    Property("profileServerCommand", default=[]),
                    Property("profileServerAddress", default=[]),
                    "-o",
                    "../../results.csv",
                    "../../roms"],
                env={
                    "LD_LIBRARY_PATH": "../lib"
                }, workdir="build/build/bin", haltOnFailure=True))
            perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("../archive/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-software.csv")))
            perf_factory.addStep(ShellCommand(name="Profile (no renderer)",
                command=["python", "-u", "../lib/mgba/perf.py",
                    "-Nw", "0",
                    "-g", "4800",
                    Property("profileServerCommand", default=[]),
                    Property("profileServerAddress", default=[]),
                    "-o",
                    "../../results.csv",
                    "../../roms"],
                env={
                    "LD_LIBRARY_PATH": "../lib"
                }, workdir="build/build/bin", haltOnFailure=True))
            perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("../archive/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-none.csv"), mode=0644))
            perf_factory.addStep(RemoveDirectory(dir="build/build"))

            if 'perfSlave' in self.base_config:
                c['slaves'].append(BuildSlave(self.base_config['perfSlave'], PASSWORDS[self.base_config['perfSlave']], properties=self.base_config))

            c['schedulers'].append(Triggerable(name="perf-{}".format(self.name), builderNames=["perf-{}".format(self.name)]))
            c['builders'].append(BuilderConfig(name="perf-{}".format(self.name),
              slavenames=[self.base_config['perfSlave']] if 'perfSlave' in self.base_config else slave_names,
              factory=perf_factory))
            force_builders.append("perf-{}".format(self.name))

        if 'perf' in self.base_config:
            addPerf()

cov_factory = BuildFactory()
cov_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
cov_factory.addStep(MakeDirectory(dir="build/build"))
cov_factory.addStep(ShellCommand(name="Configure",
    command=["cmake", "..",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Configure Cov", command=["cov-configure", "--comptype", "gcc", "--compiler", Property("cov-compiler"), "--config", "cov.conf", "--", Interpolate("--sysroot=%(prop:root)s")], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Build", command=["cov-build", "--dir", "cov-int", "--config", "cov.conf", "make"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Archive", command=["gtar", "cJf", "cov-int.tar.xz", "cov-int"], env={ "XZ_OPT": "-9e" }, workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Upload", command=["curl", "--form", "token={}".format(COV_TOKEN),
        "--form", "email=jeffrey@endrift.com",
        "--form", "file=@cov-int.tar.xz",
        "--form", Interpolate("version=\"%(prop:date)s\""),
        "--form", "description=\"Nightly\"",
        "https://scan.coverity.com/builds?project=mgba-emu%2Fmgba"], workdir="build/build"))
cov_factory.addStep(RemoveDirectory(dir="build/build"))

analyze_factory = BuildFactory()
analyze_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
analyze_factory.addStep(MakeDirectory(dir="build/build"))
analyze_factory.addStep(ShellCommand(name="Configure",
    command=["scan-build36", "cmake", "..", "-DCMAKE_BUILD_TYPE=Debug",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        "-DBUILD_QT=OFF", # Clang is not so good at the Qt front-end, for some reason
        "-USE_LZMA=OFF", # LZMA SDK is way too full of bad code
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(Compile(command=["scan-build36", "-o", "clang-results", "make"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(ShellCommand(name="Archive", command=["tar", "cvzf", "../clang-results.tar.gz", "clang-results"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(RemoveDirectory(dir="build/build"))
analyze_factory.addStep(FileUpload(slavesrc=Interpolate("clang-results.tar.gz"), masterdest=Interpolate("../archive/clang-results-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))

from buildbot.config import BuilderConfig

import yaml
with open('builders.yml') as b:
    buildersDesc = yaml.load(b)

for desc in buildersDesc:
    b = Builder(desc['name'])
    b.setBaseConfig(desc['baseConfig'])
    if 'builders' in desc:
        b.setBuilders(desc['builders'])
    if 'configs' in desc:
        b.setConfigs(desc['configs'])
    b.collect()

c['builders'].extend([
    BuilderConfig(name="nightly-cov-ubuntu64",
        slavenames=["vulpes-ubuntu64-1", "vulpes-ubuntu64-2"],
        properties={'package-name': 'nightly', 'include-hash': True},
        factory=cov_factory),
    BuilderConfig(name="analyze-freebsd",
        slavenames=["vulpes-freebsd"],
        factory=analyze_factory)])

build = AnyBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch_re='master|optimization/.*|\d+\.\d+(\.\d+)?'),
    treeStableTimer=None,
    builderNames=builders)
force = ForceScheduler(
    name="force",
    builderNames=force_builders)
nightly = NightlyTriggerable(
    name="nightly",
    builderNames=nightly_builders,
    hour=12,
    minute=50)

c['schedulers'].extend([build, force, nightly])
####### STATUS TARGETS

from buildbot.status import html, mail, words
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("mgba", WEB_PASSWORD)]),
    forceBuild = "auth",
    forceAllBuilds = "auth",
    pingBuilder = "auth",
    stopBuild = "auth",
    stopAllBuilds = "auth",
    cancelPendingBuild = "auth",
)
c['status'] = [
    html.WebStatus(http_port=8010, authz=authz_cfg),
    mail.MailNotifier(fromaddr="mgba-buildbot@endrift.com",
        sendToInterestedUsers=False,
        relayhost="endrift.com",
        smtpPort=587,
        mode='failing',
        extraRecipients=["vi@endrift.com"]),
    words.IRC(host=IRC_SERVER, nick="Orichalcum",
        useSSL=True,
        port=6697,
        channels=[{"channel": "#mgba"}],
        password=IRC_PASSWORD)
]

####### PROJECT IDENTITY

c['title'] = "mGBA"
c['buildbotURL'] = "http://buildbot.mgba.io/"

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
