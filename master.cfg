# ex: set syntax=python ts=4 et sw=4:

from tokens import *
from buildbot.plugins import *
from buildbot.process.results import SKIPPED

repo = 'https://github.com/mgba-emu/mgba.git'
docker_repo = 'https://github.com/mgba-emu/dependencies.git'

c = BuildmasterConfig = {}

####### BUILDSLAVES

package = {
    '7z': ["7za", "a", "-t7z", "-m0=lzma", "-mx=9", "-mfb=64", "-md=32m", "-ms=on"],
    'tar.xz': ["gtar", "cJf"]
}

default_workers = ['vulpes']
container_workers = ['zerda', 'ec2']
c['workers'] = [
	worker.LocalWorker('vulpes', properties={'basedir': '/usr/home/buildbot/master'}, max_builds=2),
	worker.LocalWorker('vulpes-upload', max_builds=8),
	worker.Worker('zerda', PASSWORDS['zerda'], max_builds=3),
	worker.Worker('crocuta', PASSWORDS['crocuta'], max_builds=1),
	worker.EC2LatentWorker('ec2', PASSWORDS['ec2'], 'c5.4xlarge',
		region='us-west-1', max_builds=12, ami='ami-0e64d084b84da5dba',
		placement='a',
		keypair_name='mgba-builder-keypair', security_name='vulpes-only',
		spot_instance=True, max_spot_price=0.5)
]
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = [
    changes.GitPoller(repo, project='mgba', workdir='gitpoller-workdir', branches=True, pollinterval=60),
    changes.GitPoller(docker_repo, project='dependencies', workdir='deps-workdir', branches=False, pollinterval=300),
]

####### SCHEDULERS

import datetime

c['schedulers'] = []
c['collapseRequests'] = False

builders = ['analyze-freebsd']
force_builders = ['analyze-freebsd']
upload_builders = []
medusa_builders = []
container_builders = ['docker-windows-w32', 'docker-windows-w64']

####### BUILDERS

import os

path = os.environ['HOME'] + '/bin:' + os.environ['PATH']
env = {
    'DEVKITPRO': '/opt/devkitPro',
    'VITASDK': '/opt/vitasdk'
}

c['builders'] = []

def isMaster(step):
    return step.build.getProperty('branch', 'not-master') == 'master'

def isTag(step):
    return step.build.getProperty('branch', 'not-master').startswith('refs/tags/')

def isMedusa(step):
    return step.build.getProperty('branch', 'not-medusa') == 'medusa' \
        and step.build.getProperty('medusa', False)

def isPerf(step):
    if not step.build.hasProperty('perf'):
        return False
    branch = step.build.getProperty('branch', 'not-master')
    if branch == 'master' or branch.startswith('optimization/'):
        return True
    return False

def hasPlatform(step):
    return step.build.hasProperty('platform')

def hasDeps(step):
    return step.build.hasProperty('deps')

@util.renderer
def date(props):
    d = datetime.datetime.utcnow()
    return d.strftime("%Y-%m-%d")

@util.renderer
def tagName(props):
    if not props.hasProperty('branch'):
        return ''
    if props['branch'].startswith('refs/tags/'):
        return props['branch'][len('refs/tags/'):]
    return props['branch']

class Builder:
    def __init__(self, name):
        self.name = name
        self.build_workers = default_workers
        self.base_config = {}
        self.configs = []

    def setBaseConfig(self, base_config):
        self.base_config = base_config
        if 'container' in self.base_config and self.build_workers is default_workers:
            self.build_workers = container_workers

    def setBuilders(self, builders):
        self.build_workers = builders

    def setConfigs(self, configs):
        self.configs = configs

    def collect(self):
        build_factory = util.BuildFactory()
        build_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental'))
        build_factory.addStep(steps.MakeDirectory(dir="build/build"))
        build_factory.addStep(steps.SetPropertyFromCommand(property="revnumber", command="git rev-list --count HEAD"))
        if 'container' not in self.base_config:
            build_factory.addStep(steps.ShellCommand(name="Configure",
                command=["cmake", "..",
                    "-DDISTBUILD=ON",
                    util.Interpolate("-DCMAKE_BUILD_TYPE=%(prop:debug:?|RelWithDebInfo|Release)s"),
                    "-DCPACK_PACKAGE_FILE_NAME=build",
                    util.Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
                    util.Interpolate("-DBUILD_PERF=%(prop:perf:?|ON|OFF)s"),
                    util.Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
                    util.Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
                    util.Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
                    util.Interpolate("-DBUILD_LTO=%(prop:no-lto:?|OFF|ON)s"),
                    util.Interpolate("-DBUILD_STATIC=%(prop:static:?|ON|OFF)s"),
                    util.Interpolate("-DBUILD_SHARED=%(prop:static:?|OFF|ON)s"),
                    util.Interpolate("-DM_CORE_DS=%(prop:medusa:?|ON|OFF)s"),
                    util.Interpolate("-DBUILD_PYTHON=%(prop:python:?|ON|OFF)s"),
                    util.Interpolate("-DBUILD_SUITE=%(prop:tests:?|ON|OFF)s"),
                    util.Property("cmake-flags", default=[]),
                ],
                workdir="build/build", haltOnFailure=True))

        def build(build_factory):
            build_factory.addStep(steps.SetProperty(property="project-name", value="medusa-emu", doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s)))
            if 'container' in self.base_config:
                cmake_flags = util.Interpolate('CMAKE_FLAGS=' + ' '.join([
                    "-DDISTBUILD=ON",
                    "-DCMAKE_BUILD_TYPE=%(prop:debug:?|RelWithDebInfo|Release)s",
                    "-DCPACK_PACKAGE_FILE_NAME=build",
                    "-DBUILD_PERF=%(prop:perf:?|ON|OFF)s",
                    "-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s",
                    "-DBUILD_QT=%(prop:frontends:?|ON|OFF)s",
                    "-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s",
                    "-DBUILD_LTO=%(prop:no-lto:?|OFF|ON)s",
                    "-DBUILD_STATIC=%(prop:static:?|ON|OFF)s",
                    "-DBUILD_SHARED=%(prop:static:?|OFF|ON)s",
                    "-DM_CORE_DS=%(prop:medusa:?|ON|OFF)s",
                    "-DBUILD_PYTHON=%(prop:python:?|ON|OFF)s",
                    "-DBUILD_SUITE=%(prop:tests:?|ON|OFF)s",
                    "%(prop:cmake-flags)s",
                ]))
                build_factory.addStep(steps.ShellCommand(name="Fix source permissions", command=["chmod", "-fR", "go=u-w", "."], flunkOnFailure=False))
                build_factory.addStep(steps.ShellCommand(name="Fix build permissions", command=["chmod", "6777", "build"], workdir="build", haltOnFailure=True))
                build_factory.addStep(steps.ShellCommand(name="Update container", command=["docker", "pull", util.Property("container")], haltOnFailure=True))
                build_factory.addStep(steps.ShellCommand(name="Build", command=["docker", "run", "--rm", "-e", "BUILD_DIR=build", "-e", cmake_flags, "-e", "MAKEFLAGS=-j2", "-v", util.Interpolate("%(prop:builddir)s/build:/home/mgba/src"), util.Property("container")], workdir="build", haltOnFailure=True))
                build_factory.addStep(steps.ShellCommand(name="Archive", command=["docker", "run", "--rm", "-w", "/home/mgba/src/build", "-v", util.Interpolate("%(prop:builddir)s/build:/home/mgba/src"), util.Property("container"), "cpack", "-V", "-G", "TXZ" if 'deb' not in self.base_config else "DEB"], haltOnFailure=True))
                build_factory.addStep(steps.ShellCommand(name="Cleanup permissions", command=["docker", "run", "--rm", "-w", "/home/mgba/src/build", "-v", util.Interpolate("%(prop:builddir)s/build:/home/mgba/src"), util.Property("container"), "bash", "-c", "chmod -fR go+w *"], flunkOnFailure=False))
            else:
                build_factory.addStep(steps.Compile(command=["make", "-j3"], workdir="build/build", haltOnFailure=True))
                build_factory.addStep(steps.ShellCommand(name="Archive", command=["cpack", "-V", "-G", "TXZ" if 'deb' not in self.base_config else "DEB"], workdir="build/build", haltOnFailure=True))
            build_factory.addStep(steps.MakeDirectory(dir="build/build/build"))
            if 'deb' in self.base_config:
                build_factory.addStep(steps.ShellCommand(name="Sanitize", command=["find", ".", "-name", "build-*.deb", "-exec", "fakeroot", "../tools/sanitize-deb.sh", "{}", ";"], workdir="build/build", env={'PATH': path}, haltOnFailure=True))
                build_factory.addStep(steps.ShellCommand(name="Move", command=["find", ".", "-name", util.Interpolate("*%(prop:project-name:-mgba)s*.deb"), "-exec", "mv", "{}", "build/", ";"], workdir="build/build", haltOnFailure=True))
            else:
                build_factory.addStep(steps.ShellCommand(name="Move", command=["find", ".", "-name", "build*.tar.xz", "-exec", "mv", "{}", "build/", ";"], workdir="build/build", haltOnFailure=True))
            build_factory.addStep(steps.ShellCommand(name="Bundle", command=["tar", "cvzf", "build.tar.gz", "build"], workdir="build/build", haltOnFailure=True))

        build(build_factory)
        if 'tests' in self.base_config:
            build_factory.addStep(steps.ShellCommand(name="Test", command=["ctest", "-V"], workdir="build/build", haltOnFailure=False))
        build_factory.addStep(steps.FileUpload(workdir="build/build", blocksize=1024 * 256, workersrc="build.tar.gz", masterdest=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))
        build_factory.addStep(steps.MasterShellCommand(name="Fix permissions", command=["chmod", "644", util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")], haltOnFailure=True))

        #if 'frontends' in self.base_config:
        #    build_factory.addStep(steps.ShellCommand(name="Copy Gold", command=["rsync", "-r", util.Interpolate("%(prop:basedir:-../..)s/res/gold/"), "res/"], workdir="build"))
        #    build(build_factory)
        #    build_factory.addStep(steps.FileUpload(workdir="build/build", blocksize=1024 * 256, workersrc=util.Interpolate("build.tar.gz"), masterdest=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s-gold.tar.gz")))
        #    build_factory.addStep(steps.MasterShellCommand(name="Fix Gold permissions", command=["chmod", "644", util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s-gold.tar.gz")], haltOnFailure=True))
        #    build_factory.addStep(steps.ShellCommand(name="Deconfigure Gold", command=["git", "checkout", "res"], workdir="build", haltOnFailure=True))

        build_factory.addStep(steps.RemoveDirectory(dir="build/build"))
        build_factory.addStep(steps.Trigger(schedulerNames=[util.Interpolate("perf-%(prop:name)s")], doStepIf=lambda s: isPerf(s), hideStepIf=lambda results, s: not s.build.hasProperty('perf')))
        build_factory.addStep(steps.Trigger(schedulerNames=[util.Interpolate("upload-%(prop:name)s")], doStepIf=lambda s: (isMaster(s) or isMedusa(s)) and hasPlatform(s), hideStepIf=lambda results, s: not hasPlatform(s), set_properties={ 'revnumber': util.Property('revnumber') }))
        build_factory.addStep(steps.Trigger(schedulerNames=[util.Interpolate("package-%(prop:name)s")], doStepIf=lambda s: isTag(s) and hasPlatform(s), hideStepIf=lambda results, s: not (isTag(s) and hasPlatform(s)), set_properties={ 'package-name': tagName, 'package-type': 'release', 'release': True }))

        configs = self.configs or [{'name': self.name}]
        for config in configs:
            cfg = dict(self.base_config)
            cfg.update(config)
            c['builders'].append(util.BuilderConfig(name="build-{}".format(config['name']),
              workernames=self.build_workers,
              env=env,
              properties=cfg,
              factory=build_factory))
            builders.append("build-{}".format(config['name']))
            force_builders.append("build-{}".format(config['name']))
            if 'medusa' in self.base_config:
                medusa_builders.append("build-{}".format(config['name']))

        if 'ext' in self.base_config:
            package_name = "%(prop:project-name:-mGBA)s-%(prop:package-name:-%(prop:branch)s)s-%(prop:release:?||%(prop:date)s-)s%(prop:platform)s%(prop:include-hash:+-%(prop:revnumber)s-%(prop:revision)s)s"
            package_name_debug = "%(prop:project-name:-mGBA)s-%(prop:package-name:-%(prop:branch)s)s-%(prop:release:?||%(prop:date)s-)s%(prop:platform)s-debug%(prop:include-hash:+-%(prop:revnumber)s-%(prop:revision)s)s"

            package_factory = util.BuildFactory()
            package_factory.addStep(steps.FileDownload(mastersrc=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), workerdest="archive.tar.gz", haltOnFailure=True, blocksize=1024 * 256))
            package_factory.addStep(steps.FileDownload(mastersrc=util.Property("deps"), workerdest="deps.tar.gz", haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED, blocksize=1024 * 256))
            package_factory.addStep(steps.SetProperty(property="date", value=util.Interpolate("%(kw:date)s", date=date)))
            package_factory.addStep(steps.SetProperty(property="project-name", value="medusa", doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s)))
            package_factory.addStep(steps.MakeDirectory(dir=util.Interpolate("build/" + package_name)))
            package_factory.addStep(steps.ShellCommand(name="Unarchive build", command=["tar", "xvf", "archive.tar.gz"], haltOnFailure=True))
            if 'files' in self.base_config:
                if 'unarchive-files' in self.base_config:
                    for arc in self.base_config['files']:
                        package_factory.addStep(steps.ShellCommand(name="Unarchive build products", workdir="build/build", command=["tar", "xvf", arc, "-C", util.Interpolate("../" + package_name)], haltOnFailure=True))
                else:
                    package_factory.addStep(steps.ShellCommand(name="Move build products", workdir="build/build", command=["mv", util.Property("files"), util.Interpolate("../" + package_name)], doStepIf=lambda s: not isMedusa(s), hideStepIf=lambda results, s: isMedusa(s), haltOnFailure=True))
                    package_factory.addStep(steps.ShellCommand(name="Move build products", workdir="build/build", command=["mv", util.Property("files-medusa"), util.Interpolate("../" + package_name)], doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s), haltOnFailure=True))
            else:
                package_factory.addStep(steps.ShellCommand(name="Unarchive build products", workdir="build/build", command=["tar", "xvf", util.Property("archive"), "-C", util.Interpolate("../" + package_name)], haltOnFailure=True))

            package_factory.addStep(steps.ShellCommand(name="Unarchive deps", command=["tar", "xvf", "deps.tar.gz", "-C", util.Interpolate(package_name)], haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
            package_factory.addStep(steps.ShellCommand(name="Repackage", command=[util.Property("package"), util.Interpolate("package.%(prop:ext)s"), util.Interpolate(package_name)], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
            package_factory.addStep(steps.RemoveDirectory(dir=util.Interpolate("build/" + package_name)))
            package_factory.addStep(steps.FileUpload(name="Upload to archive", blocksize=1024 * 256, workersrc=util.Interpolate("package.%(prop:ext)s"), masterdest=util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s")))
            package_factory.addStep(steps.MasterShellCommand(name="Fix permissions", command=["chmod", "644", util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s")], haltOnFailure=True))

            if 'debug' in self.base_config:
                package_factory.addStep(steps.MakeDirectory(dir=util.Interpolate("build/" + package_name_debug)))
                if 'files-debug' in self.base_config:
                    if 'unarchive-files' in self.base_config:
                        for arc in self.base_config['files-debug']:
                            package_factory.addStep(steps.ShellCommand(name="Unarchive debug build products", workdir="build/build", command=["tar", "xvf", arc, "-C", util.Interpolate("../" + package_name_debug)], haltOnFailure=True))
                    else:
                        package_factory.addStep(steps.ShellCommand(name="Move debug build products", workdir="build/build", command=["mv", util.Property("files-debug"), util.Interpolate("../" + package_name_debug)], doStepIf=lambda s: not isMedusa(s), hideStepIf=lambda results, s: isMedusa(s), haltOnFailure=True))
                        package_factory.addStep(steps.ShellCommand(name="Move debug build products", workdir="build/build", command=["mv", util.Property("files-debug-medusa"), util.Interpolate("../" + package_name_debug)], doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s), haltOnFailure=True))
                elif 'archive-debug' in self.base_config:
                    package_factory.addStep(steps.ShellCommand(name="Unarchive debug build products", workdir="build/build", command=["tar", "xvf", util.Property("archive-debug"), "-C", util.Interpolate("../" + package_name_debug)], haltOnFailure=True))

                package_factory.addStep(steps.ShellCommand(name="Repackage debug", command=[util.Property("package"), util.Interpolate("package-debug.%(prop:ext)s"), util.Interpolate(package_name_debug)], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
                package_factory.addStep(steps.RemoveDirectory(dir=util.Interpolate("build/" + package_name_debug)))
                package_factory.addStep(steps.FileUpload(name="Upload to archive", blocksize=1024 * 256, workersrc=util.Interpolate("package-debug.%(prop:ext)s"), masterdest=util.Interpolate("../archive/builds/" + package_name_debug + ".%(prop:ext)s")))
                package_factory.addStep(steps.MasterShellCommand(name="Fix permissions", command=["chmod", "644", util.Interpolate("../archive/builds/" + package_name_debug + ".%(prop:ext)s")], haltOnFailure=True))

            package_factory.addStep(steps.ShellCommand(name="Clean", command=["rm", "-f", util.Interpolate("package.%(prop:ext)s"), util.Interpolate("package-debug.%(prop:ext)s")]))
            package_factory.addStep(steps.MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", util.Interpolate("%(prop:package-type:-%(prop:package-name:-%(prop:branch)s)s)s/"), util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s"), util.Interpolate("%(prop:project-name:-mGBA)s-%(prop:package-name:-%(prop:branch)s)s-latest-%(prop:platform)s.%(prop:ext)s")], haltOnFailure=True, doStepIf=lambda s: not isTag(s), hideStepIf=lambda results, s: isTag(s)))
            package_factory.addStep(steps.MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", util.Interpolate("%(prop:package-type:-%(prop:package-name:-%(prop:branch)s)s)s/"), util.Interpolate("../archive/builds/" + package_name + ".%(prop:ext)s")], haltOnFailure=True, doStepIf=isTag, hideStepIf=lambda results, s: not isTag(s)))
            if 'debug' in self.base_config:
                package_factory.addStep(steps.MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", util.Interpolate("%(prop:package-type:-%(prop:package-name:-%(prop:branch)s)s)s/"), util.Interpolate("../archive/builds/" + package_name_debug + ".%(prop:ext)s"), util.Interpolate("%(prop:project-name:-mGBA)s-%(prop:package-name:-%(prop:branch)s)s-latest-%(prop:platform)s-debug.%(prop:ext)s")], haltOnFailure=True, doStepIf=lambda s: not isTag(s), hideStepIf=lambda results, s: isTag(s)))
                package_factory.addStep(steps.MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", util.Interpolate("%(prop:package-type:-%(prop:package-name:-%(prop:branch)s)s)s/"), util.Interpolate("../archive/builds/" + package_name_debug + ".%(prop:ext)s")], haltOnFailure=True, doStepIf=isTag, hideStepIf=lambda results, s: not isTag(s)))

            package_prop = package[self.base_config['ext']]
            for config in configs:
                cfg = dict(self.base_config)
                cfg.update(config)
                upload_props = {'package-name': 'build', 'include-hash': True, 'package': package_prop}
                upload_props.update(cfg)
                package_props = {'package': package_prop}
                package_props.update(cfg)
                c["builders"].extend([
                    util.BuilderConfig(name="upload-{}".format(config['name']),
                        workernames=['vulpes-upload'],
                        properties=upload_props,
                        factory=package_factory),
                    util.BuilderConfig(name="package-{}".format(config['name']),
                        workernames=['vulpes-upload'],
                        properties=package_props,
                        factory=package_factory),
                ])
                upload_builders.extend(["upload-{}".format(config['name']), "package-{}".format(config['name'])])
                force_builders.extend(["upload-{}".format(config['name']), "package-{}".format(config['name'])])

        def addPerf(cfg):
            if not cfg.get('no-unix'):
                if cfg.get('deb'):
                    bindir = "/usr/bin"
                    rootdir = "../../.."
                else:
                    bindir = "/bin"
                    rootdir = "../.."
                libdir = "../lib"
            else:
                libdir = "."
                bindir = ""
                rootdir = ".."
            perf_factory = util.BuildFactory()
            perf_factory.addStep(steps.SetProperty(property="project-name", value="medusa-emu", doStepIf=lambda s: isMedusa(s), hideStepIf=lambda results, s: not isMedusa(s)))
            perf_factory.addStep(steps.FileDownload(mastersrc=util.Interpolate("../archive/archive/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/archive-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s.tar.gz"), workerdest="archive.tar.gz", haltOnFailure=True, blocksize=1024 * 256))
            perf_factory.addStep(steps.ShellCommand(name="Unarchive", command=["tar", "xvzf", "archive.tar.gz"], haltOnFailure=True))
            if cfg.get('deb'):
                perf_factory.addStep(steps.ShellCommand(name="Unarchive", command=["dpkg-deb", "-X", util.Property("archive"), '.'], workdir="build/build", haltOnFailure=True))
                for arc in cfg.get('archive-perf', []):
                    perf_factory.addStep(steps.ShellCommand(name="Unarchive", command=["dpkg-deb", "-X", "%s.deb" % arc, '.'], workdir="build/build", haltOnFailure=True))
            else:
                perf_factory.addStep(steps.ShellCommand(name="Unarchive", command=["tar", "xvf", util.Property("archive")], workdir="build/build", haltOnFailure=True))
                for arc in cfg.get('archive-perf', []):
                    perf_factory.addStep(steps.ShellCommand(name="Unarchive", command=["tar", "xvf", "build-%s.tar.xz" % arc], workdir="build/build", haltOnFailure=True))
            perf_factory.addStep(steps.ShellCommand(name="Profile (software renderer)",
                command=["python", "-u", util.Interpolate(libdir + "/%(prop:project-name:-mgba)s/perf.py"),
                    "-w", "0",
                    "-g", "4800",
                    util.Property("profileServerCommand", default=[]),
                    util.Property("profileServerAddress", default=[]),
                    "-o",
                    rootdir + "/results.csv",
                    util.Interpolate("%(prop:perf-basedir:-../..)s/roms")],
                env={
                    "LD_LIBRARY_PATH": libdir
                }, workdir="build/build" + bindir, haltOnFailure=True))
            perf_factory.addStep(steps.FileUpload(workersrc="results.csv", masterdest=util.Interpolate("../archive/perf/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-software.csv"), mode=0o644))
            perf_factory.addStep(steps.ShellCommand(name="Profile (no renderer)",
                command=["python", "-u", util.Interpolate(libdir + "/%(prop:project-name:-mgba)s/perf.py"),
                    "-Nw", "0",
                    "-g", "4800",
                    util.Property("profileServerCommand", default=[]),
                    util.Property("profileServerAddress", default=[]),
                    "-o",
                    rootdir + "/results.csv",
                    util.Interpolate("%(prop:perf-basedir:-../..)s/roms")],
                env={
                    "LD_LIBRARY_PATH": libdir
                }, workdir="build/build" + bindir, haltOnFailure=True))
            perf_factory.addStep(steps.FileUpload(workersrc="results.csv", masterdest=util.Interpolate("../archive/perf/%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s/perf-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:revision)s-none.csv"), mode=0o644))
            perf_factory.addStep(steps.RemoveDirectory(dir="build/build"))

            name = 'perf-{}'.format(cfg.get('name', self.name))
            if 'perf-worker' in cfg:
                c['workers'].append(worker.Worker(cfg['perf-worker'], PASSWORDS[cfg['perf-worker']], properties=cfg, max_builds=1))
            else:
                cfg['perf-basedir'] = '/usr/home/buildbot/master'
                c['workers'].append(worker.LocalWorker(name, properties=cfg, max_builds=1))

            c['schedulers'].append(schedulers.Triggerable(name=name, builderNames=[name]))
            c['builders'].append(util.BuilderConfig(name=name,
              workernames=[cfg.get('perf-worker', name)],
              factory=perf_factory))
            force_builders.append(name)

        for config in configs:
            cfg = dict(self.base_config)
            cfg.update(config)
            if 'perf' in cfg:
                addPerf(cfg)

cov_factory = util.BuildFactory()
cov_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental'))
cov_factory.addStep(steps.MakeDirectory(dir="build/build"))
cov_factory.addStep(steps.ShellCommand(name="Configure",
    command=["cmake", "..",
        util.Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        util.Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_DS=%(prop:medusa:?|ON|OFF)s"),
        util.Property("cmake-flags", default=[]),
    ],
    workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Configure Cov", command=["cov-configure", "--comptype", "gcc", "--compiler", util.Property("cov-compiler"), "--config", "cov.conf", "--", util.Interpolate("--sysroot=%(prop:root)s")], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Build", command=["cov-build", "--dir", "cov-int", "--config", "cov.conf", "make"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Archive", command=["gtar", "cJf", "cov-int.tar.xz", "cov-int"], env={ "XZ_OPT": "-9e" }, workdir="build/build", haltOnFailure=True))
cov_factory.addStep(steps.ShellCommand(name="Upload", command=["curl", "--form", "token={}".format(COV_TOKEN),
        "--form", "email=jeffrey@endrift.com",
        "--form", "file=@cov-int.tar.xz",
        "--form", util.Interpolate("version=\"%(prop:date)s\""),
        "--form", "description=\"Nightly\"",
        "https://scan.coverity.com/builds?project=mgba-emu%2Fmgba"], workdir="build/build"))
cov_factory.addStep(steps.RemoveDirectory(dir="build/build"))

analyze_factory = util.BuildFactory()
analyze_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental'))
analyze_factory.addStep(steps.MakeDirectory(dir="build/build"))
analyze_factory.addStep(steps.ShellCommand(name="Configure",
    command=["scan-build36", "cmake", "..", "-DCMAKE_BUILD_TYPE=Debug",
        util.Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        util.Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        "-DBUILD_QT=OFF", # Clang is not so good at the Qt front-end, for some reason
        "-USE_LZMA=OFF", # LZMA SDK is way too full of bad code
        util.Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
        util.Interpolate("-DBUILD_DS=%(prop:medusa:?|ON|OFF)s"),
        util.Property("cmake-flags", default=[]),
    ],
    workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(steps.Compile(command=["scan-build36", "-o", "clang-results", "make"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(steps.ShellCommand(name="Archive", command=["tar", "cvzf", "../clang-results.tar.gz", "clang-results"], workdir="build/build", haltOnFailure=True))
analyze_factory.addStep(steps.RemoveDirectory(dir="build/build"))
analyze_factory.addStep(steps.FileUpload(workersrc="clang-results.tar.gz", masterdest=util.Interpolate("../archive/scan-build/clang-results-%(prop:arch)s%(prop:platform:+-%(prop:platform)s)s-%(prop:got_revision)s.tar.gz")))

docker_factory = util.BuildFactory()
docker_factory.addStep(steps.Git(repourl=util.Property("repository"), mode='incremental', submodules=False))
docker_factory.addStep(steps.ShellCommand(name="Login", command=["docker", "login", "-u", DOCKER_USERNAME, "-p", DOCKER_PASSWORD]))
docker_factory.addStep(steps.ShellCommand(name="Build", command=["./buildscripts/docker-build.sh", util.Property("container")], haltOnFailure=True))

import yaml
with open('builders.yml') as b:
    buildersDesc = yaml.load(b)

for desc in buildersDesc:
    b = Builder(desc['name'])
    b.setBaseConfig(desc['baseConfig'])
    if 'builders' in desc:
        b.setBuilders(desc['builders'])
    if 'configs' in desc:
        b.setConfigs(desc['configs'])
    b.collect()

c['builders'].extend([
    util.BuilderConfig(name="analyze-freebsd",
        workernames=default_workers,
        factory=analyze_factory),
    util.BuilderConfig(name="docker-windows-w32",
        workernames=['zerda'],
        collapseRequests=True,
        properties={'container': 'windows:w32'},
        factory=docker_factory),
    util.BuilderConfig(name="docker-windows-w64",
        workernames=['zerda'],
        collapseRequests=True,
        properties={'container': 'windows:w64'},
        factory=docker_factory),
    ])

build = schedulers.AnyBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch_re='master|optimization/.*|\d+\.\d+(\.\d+)?|refs/tags/.*', project='mgba'),
    treeStableTimer=None,
    builderNames=builders)
medusa = schedulers.SingleBranchScheduler(
    name="medusa",
    change_filter=util.ChangeFilter(branch='medusa', project='mgba'),
    treeStableTimer=None,
    builderNames=medusa_builders)
force = schedulers.ForceScheduler(
    name="force",
    builderNames=force_builders)
docker_build = schedulers.SingleBranchScheduler(
    name="docker",
    change_filter=util.ChangeFilter(project='dependencies'),
    builderNames=container_builders)

c['schedulers'].extend([build, medusa, force, docker_build])
c['schedulers'].extend([schedulers.Triggerable(name=builder, builderNames=[builder]) for builder in upload_builders])
####### STATUS TARGETS

c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': {},
        'console_view': {}
    },
    'auth': util.UserPasswordAuth({'mgba': WEB_PASSWORD}),
    'authz': util.Authz(
        stringsMatcher=util.fnmatchStrMatcher,
        allowRules=[
            util.AnyControlEndpointMatcher(role="admins", defaultDeny=True)
        ],
        roleMatchers=[
            util.RolesFromUsername(roles=["admins"], usernames=["mgba"])
        ]
    )
}

c['services'] = [
    reporters.MailNotifier(fromaddr="mgba-buildbot@endrift.com",
        sendToInterestedUsers=False,
        relayhost="endrift.com",
        smtpPort=587,
        mode='failing',
        extraRecipients=["vi@endrift.com"]),
    reporters.IRC(host=IRC_SERVER, nick="Stheno",
        useSSL=True,
        port=6697,
        channels=[{"channel": "#medusa-dev"}],
        password=IRC_PASSWORD,
        notify_events={
            'exception': True,
            'successToFailure': True,
            'failureToSuccess': True})
]

####### PROJECT IDENTITY

c['title'] = "mGBA"
c['buildbotURL'] = "https://buildbot.mgba.io/"
c['buildbotNetUsageData'] = None

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
