# -*- python -*-
# ex: set syntax=python: ts=4 et

from .tokens import *

repo = 'https://github.com/mgba-emu/mgba.git'
repo2 = '/home/jeffrey/mgba'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave("vulpes-a8", PASSWORDS["vulpes-a8"], properties={
        'root': '/home/jeffrey/bbb/root',
        'arch': 'armv7-linux-gnueabihf-bbb',
        'toolchain': '/home/jeffrey/bbb/CMakeToolchain.txt',
        'perf': True,
        'bbb': True}),
    BuildSlave("vulpes-freebsd", PASSWORDS["vulpes-freebsd"], properties={
        'frontends': True,
        'perf': True,
        'arch': 'x86_64-freebsd-amd64'}),
    BuildSlave("vulpes-osx", PASSWORDS["vulpes-osx"], properties={
        'root': '/data/opt/cross/roots/osx',
        'deps': '/home/jeffrey/mgba/osx/deps.tar.gz',
        'files': ['Applications/mGBA.app', 'share/doc/mGBA/CHANGES', 'share/doc/mGBA/README.md'],
        'arch': 'x86_64-apple-darwin13',
        'platform': 'osx',
        'frontends': True,
        'package': ["gtar", "cJf"],
        'ext': 'tar.xz',
        'toolchain': '/home/jeffrey/osx/CMakeToolchain.txt'}),
    BuildSlave("vulpes-rpi", PASSWORDS["vulpes-rpi"], properties={
        'root': '/home/jeffrey/raspi/root',
        'arch': 'armv6-linux-gnueabihf-rpi',
        'toolchain': '/home/jeffrey/raspi/build/CMakeToolchain.txt',
        'perf': True,
        'rpi': True}),
    BuildSlave("vulpes-win32", PASSWORDS["vulpes-win32"], properties={
        'root': '/data/opt/cross/roots/win32',
        'deps': '/home/jeffrey/mgba/win32/deps.tar.gz',
        'files': ['bin/mGBA.exe', 'lib/libmgba.dll', 'share/doc/mGBA/CHANGES', 'share/doc/mGBA/README.md'],
        'arch': 'i686-w64-mingw32',
        'platform': 'win32',
        'frontends': True,
        'package': ["7z", "a"],
        'ext': '7z',
        'toolchain': '/home/jeffrey/win32/CMakeToolchain.txt'}),
    BuildSlave("vulpes-ubuntu64", PASSWORDS["vulpes-ubuntu64"], properties={
        'root': '/data/opt/cross/roots/ubuntu',
        'files': ['libmgba.deb', 'mgba-sdl.deb', 'mgba-qt.deb'],
        'arch': 'x86_64-ubuntu-linux-gnu',
        'platform': 'ubuntu64-trusty',
        'frontends': True,
        'package': ["gtar", "cJf"],
        'ext': 'tar.xz',
        'deb': True,
        'cov-compiler': '/usr/local/bin/x86_64-linux-gnu-gcc', 
        'toolchain': '/home/jeffrey/mgba/ubuntu/CMakeToolchain.txt'}),
    BuildSlave("nigrata", PASSWORDS["nigrata"], properties={
        'arch': 'armv7-linux-gnueabihf-bbb'}),
    BuildSlave("flavescens", PASSWORDS["flavescens"], properties={
        'arch': 'armv6-linux-gnueabihf-rpi'})
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = [
    GitPoller(repo, workdir='gitpoller-workdir', branches=True, pollinterval=60),
    GitPoller(repo2, workdir='gitpoller-workdir', branches=(lambda b: 'optimization' in b), pollinterval=60)
]

####### SCHEDULERS

from buildbot.schedulers.basic import AnyBranchScheduler, Dependent
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import NightlyTriggerable
from buildbot.changes import filter
import datetime

build = AnyBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch_re='master|optimization/.*'),
    treeStableTimer=None,
    builderNames=["build-bbb", "build-freebsd", "build-osx", "build-rpi", "build-win32", "build-ubuntu64"])
force = ForceScheduler(
    name="force",
    builderNames=["build-bbb", "build-freebsd", "build-osx", "build-rpi", "build-win32", "build-ubuntu64", "nightly-osx", "nightly-ubuntu64", "nightly-win32", "perf-bbb", "perf-rpi"])
perf = Dependent(
    name="perf",
    upstream=build,
    builderNames=["perf-bbb", "perf-rpi"])
nightly = NightlyTriggerable(
    name="nightly",
    builderNames=["nightly-win32", "nightly-osx", "nightly-ubuntu64", "nightly-cov-ubuntu64"],
    hour=16,
    minute=0)
c['schedulers'] = [build, force, perf, nightly]

c['mergeRequests'] = False

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

import os

path = os.environ['HOME'] + '/bin:' + os.environ['PATH']

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate, Property, renderer
from buildbot.status.results import SKIPPED
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.slave import MakeDirectory, RemoveDirectory
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.trigger import Trigger


def isMaster(step):
    return step.build.getProperty('branch', 'not-master') == 'master'

def hasPlatform(step):
    return step.build.hasProperty('platform')

def isDeb(step):
    return step.build.hasProperty('deb')

def hasDeps(step):
    return step.build.hasProperty('deps')

build_factory = BuildFactory()
build_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
build_factory.addStep(MakeDirectory(dir="build/build"))
build_factory.addStep(ShellCommand(name="Configure",
    command=["cmake", "..",
        Interpolate("-DBUILD_PERF=%(prop:perf:?|ON|OFF)s"),
        "-DCMAKE_BUILD_TYPE=Release",
        "-DCMAKE_INSTALL_PREFIX=/",
        "-DCPACK_PACKAGE_FILE_NAME=build",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
build_factory.addStep(Compile(workdir="build/build", haltOnFailure=True))
build_factory.addStep(ShellCommand(name="Archive", command=["cpack", "-G", Interpolate("%(prop:deb:?|DEB|TGZ)s")], workdir="build/build", haltOnFailure=True))
build_factory.addStep(ShellCommand(name="Sanitize", command=["../tools/sanitize-deb.sh", "build-libmgba.deb", "build-mgba-sdl.deb", "build-mgba-qt.deb"], workdir="build/build", env={'PATH': path}, doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(MakeDirectory(dir="build/build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-libmgba.deb", "build/libmgba.deb"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-sdl.deb", "build/mgba-sdl.deb"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Move", command=["mv", "build-mgba-qt.deb", "build/mgba-qt.deb"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(name="Bundle", command=["tar", "czf", "build.tar.gz", "build"], workdir="build/build", doStepIf=lambda s: isDeb(s), hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(FileUpload(workdir="build/build", slavesrc=Interpolate("build.tar.gz"), masterdest=Interpolate("archives/archive-%(prop:arch)s-%(prop:got_revision)s.tar.gz")))
build_factory.addStep(RemoveDirectory(dir="build/build"))
build_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("archives/archive-%(prop:arch)s-%(prop:got_revision)s.tar.gz")], haltOnFailure=True))
build_factory.addStep(Trigger(schedulerNames=["nightly"], doStepIf=lambda s: isMaster(s) and hasPlatform(s), hideStepIf=lambda results, s: not hasPlatform(s)))

perf_factory = BuildFactory()
perf_factory.addStep(FileDownload(mastersrc=Interpolate("archives/archive-%(prop:arch)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
perf_factory.addStep(ShellCommand(name="Unarchive", command=["tar", "xzf", "archive.tar.gz"], haltOnFailure=True))
perf_factory.addStep(ShellCommand(name="Profile (software renderer)",
    command=["python", "-u", "../lib/mgba/perf.py",
        "-w", "60",
        "-g", "0",
        "-o",
        "../../results.csv",
        "../../roms"],
    env={
        "LD_LIBRARY_PATH": "../lib"
    }, workdir="build/build/bin", haltOnFailure=True))
perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("archives/perf-%(prop:arch)s-%(prop:revision)s-software.csv")))
perf_factory.addStep(ShellCommand(name="Profile (no renderer)",
    command=["python", "-u", "../lib/mgba/perf.py",
        "-Nw", "60",
        "-g", "0",
        "-o",
        "../../results.csv",
        "../../roms"],
    env={
        "LD_LIBRARY_PATH": "../lib"
    }, workdir="build/build/bin", haltOnFailure=True))
perf_factory.addStep(FileUpload(slavesrc="results.csv", masterdest=Interpolate("archives/perf-%(prop:arch)s-%(prop:revision)s-none.csv"), mode=0644))
perf_factory.addStep(RemoveDirectory(dir="build/build"))

@renderer
def date(props):
    d = datetime.datetime.utcnow()
    return d.strftime("%Y-%m-%d")

nightly_factory = BuildFactory()
nightly_factory.addStep(FileDownload(mastersrc=Interpolate("archives/archive-%(prop:arch)s-%(prop:revision)s.tar.gz"), slavedest="archive.tar.gz", haltOnFailure=True))
nightly_factory.addStep(FileDownload(mastersrc=Interpolate("%(prop:deps)s"), slavedest="deps.tar.gz", haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
nightly_factory.addStep(SetProperty(property="date", value=Interpolate("%(kw:date)s", date=date)))
nightly_factory.addStep(MakeDirectory(dir=Interpolate("build/mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s")))
nightly_factory.addStep(ShellCommand(name="Unarchive build", command=["tar", "xzf", "archive.tar.gz"], haltOnFailure=True))
nightly_factory.addStep(ShellCommand(name="Unarchive deps", command=["tar", "xzf", "deps.tar.gz", "-C", Interpolate("mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s")], haltOnFailure=True, doStepIf=lambda s: hasDeps(s), hideStepIf=lambda results, s: results == SKIPPED))
nightly_factory.addStep(ShellCommand(name="Move build products", workdir="build/build", command=["mv", Property("files"), Interpolate("../mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s")], haltOnFailure=True))
nightly_factory.addStep(ShellCommand(name="Copy resources", command=["cp", "LICENSE", Interpolate("mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s")], haltOnFailure=True))
nightly_factory.addStep(ShellCommand(name="Repackage", command=[Property("package"), Interpolate("mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s.%(prop:ext)s"), Interpolate("mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s")], env={ "XZ_OPT": "-9e" }, haltOnFailure=True))
nightly_factory.addStep(RemoveDirectory(dir=Interpolate("build/mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s")))
nightly_factory.addStep(FileUpload(name="Upload to archive", slavesrc=Interpolate("mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s.%(prop:ext)s"), masterdest=Interpolate("archives/mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s.%(prop:ext)s")))
nightly_factory.addStep(MasterShellCommand(name="Fix permissions", command=["chmod", "644", Interpolate("archives/mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s.%(prop:ext)s")], haltOnFailure=True))
nightly_factory.addStep(MasterShellCommand(name="Upload to S3", command=["./s3-upload.sh", Interpolate("archives/mGBA-nightly-%(prop:date)s-%(prop:platform)s-%(prop:revision)s.%(prop:ext)s"), Interpolate("mGBA-nightly-latest-%(prop:platform)s.%(prop:ext)s")], haltOnFailure=True))

cov_factory = BuildFactory()
cov_factory.addStep(Git(repourl=Interpolate("%(prop:repository)s"), mode='incremental'))
cov_factory.addStep(MakeDirectory(dir="build/build"))
cov_factory.addStep(ShellCommand(name="Configure",
    command=["cmake", "..",
        Interpolate("-DCMAKE_TOOLCHAIN_FILE=%(prop:toolchain)s"),
        Interpolate("-DBUILD_BBB=%(prop:bbb:?|ON|OFF)s"),
        Interpolate("-DBUILD_RASPI=%(prop:rpi:?|ON|OFF)s"),
        Interpolate("-DBUILD_SDL=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DBUILD_QT=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_FFMPEG=%(prop:frontends:?|ON|OFF)s"),
        Interpolate("-DUSE_PNG=%(prop:frontends:?|ON|OFF)s"),
    ],
    workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Configure Cov", command=["cov-configure", "--comptype", "gcc", "--compiler", Property("cov-compiler"), "--config", "cov.conf"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Build", command=["cov-build", "--dir", "cov-int", "--config", "cov.conf", "make"], workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Archive", command=["gtar", "cJf", "cov-int.tar.xz", "cov-int"], env={ "XZ_OPT": "-9e" }, workdir="build/build", haltOnFailure=True))
cov_factory.addStep(ShellCommand(name="Upload", command=["curl", "--form", "token={}".format(COV_TOKEN),
        "--form", "email=jeffrey@endrift.com",
        "--form", "file=@cov-int.tar.xz",
        "--form", Interpolate("version=\"%(prop:date)s\""),
        "--form", "description=\"Nightly\"",
        "https://scan.coverity.com/builds?project=mgba-emu%2Fmgba"], workdir="build/build"))
cov_factory.addStep(RemoveDirectory(dir="build/build"))

from buildbot.config import BuilderConfig

c['builders'] = [
    BuilderConfig(name="build-bbb",
      slavenames=["vulpes-a8"],
      factory=build_factory),
    BuilderConfig(name="build-freebsd",
      slavenames=["vulpes-freebsd"],
      factory=build_factory),
    BuilderConfig(name="build-rpi",
      slavenames=["vulpes-rpi"],
      factory=build_factory),
    BuilderConfig(name="build-osx",
      slavenames=["vulpes-osx"],
      factory=build_factory),
    BuilderConfig(name="build-win32",
      slavenames=["vulpes-win32"],
      factory=build_factory),
    BuilderConfig(name="build-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      factory=build_factory),
    BuilderConfig(name="nightly-osx",
      slavenames=["vulpes-osx"],
      factory=nightly_factory),
    BuilderConfig(name="nightly-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      factory=nightly_factory),
    BuilderConfig(name="nightly-cov-ubuntu64",
      slavenames=["vulpes-ubuntu64"],
      factory=cov_factory),
    BuilderConfig(name="nightly-win32",
      slavenames=["vulpes-win32"],
      factory=nightly_factory),
    BuilderConfig(name="perf-bbb",
      slavenames=["nigrata"],
      factory=perf_factory),
    BuilderConfig(name="perf-rpi",
      slavenames=["flavescens"],
      factory=perf_factory),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "mGBA"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://vulpes.local.d.endrift.com:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
